{"version":3,"sources":["c2_NetworkDoubleSpends/createNetSim.js","components/react-d3-graph-custom/src/const.js","components/react-d3-graph-custom/src/components/graph/graph.const.js","components/react-d3-graph-custom/src/components/graph/graph.config.js","components/react-d3-graph-custom/src/err.js","components/react-d3-graph-custom/src/components/link/Link.jsx","components/react-d3-graph-custom/src/components/node/node.const.js","components/react-d3-graph-custom/src/components/node/node.helper.js","components/react-d3-graph-custom/src/components/node/Node.jsx","components/react-d3-graph-custom/src/utils.js","components/react-d3-graph-custom/src/components/graph/graph.helper.js","components/react-d3-graph-custom/src/components/graph/graph.renderer.jsx","components/react-d3-graph-custom/src/components/NodeControls.js","components/react-d3-graph-custom/src/components/graph/Graph.jsx","components/Controls.js","components/Ledger.jsx","components/Ledgers.jsx","components/Instructions.jsx","components/TrayButton.jsx","components/Tray.jsx","components/Network.js","components/App.js","registerServiceWorker.js","index.js","c2_NetworkDoubleSpends/nodeAgent.js","c2_NetworkDoubleSpends/networksim.js"],"names":["EthCrypto","__webpack_require__","NetworkSimulator","Spender","wallet","genesis","network","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","pausedSpending","that","otherNodes","nodes","filter","n","address","Math","floor","random","length","state","balance","tx","generateTx","getRandomReceiver","transactions","push","applyTransaction","broadcast","pid","Node","wallets","i","createIdentity","nonce","JSON","parse","stringify","connectPeer","module","exports","src_const","SYMBOLS","CIRCLE","CROSS","DIAMOND","SQUARE","STAR","TRIANGLE","WYE","graph_const","COORDS_SEPARATOR","FORCE_IDEAL_STRENGTH","FORCE_X","FORCE_Y","GRAPH_CONTAINER_ID","GRAPH_WRAPPER_ID","KEYWORDS","SAME","LINK_CLASS_NAME","NODE_CLASS_NAME","graph_config","automaticRearrangeAfterDropNode","height","highlightDegree","highlightOpacity","linkHighlightBehavior","maxZoom","minZoom","nodeHighlightBehavior","panAndZoom","staticGraph","width","node","color","fontColor","fontSize","fontWeight","highlightColor","highlightFontSize","highlightFontWeight","highlightStrokeColor","highlightStrokeWidth","labelProperty","mouseCursor","opacity","renderLabel","size","strokeColor","strokeWidth","svg","symbolType","link","semanticStrokeWidth","err","GRAPH_NO_ID_PROP","INVALID_LINKS","INSUFFICIENT_DATA","Link_Link","handleOnMouseOverLink","props","onMouseOverLink","source","target","handleOnMouseOutLink","onMouseOutLink","lineStyle","stroke","lineProps","className","onClick","handleOnClickLink","onMouseOut","onMouseOver","style","x1","x2","y1","y2","react_default","a","createElement","Component","node_const","ARC","START_ANGLE","END_ANGLE","PI","DEFAULT_NODE_SIZE","NODE_LABEL_DX","NODE_LABEL_DY","node_helper","buildSvgSymbol","arguments","undefined","symbolTypeDesc","Object","d3_shape","type","typeName","_convertTypeToD3Symbol","Node_Node","handleOnClickNode","onClickNode","id","handleOnMouseOverNode","onMouseOverNode","handleOnMouseOutNode","label","gerbil","nodeProps","cursor","textProps","dx","dy","fill","gtx","cx","gty","cy","ty","transform","concat","assign","href","d","gProps","MAX_DEPTH","_isPropertyNestedObject","o","k","hasOwnProperty","utils_typeof","isObjectEmpty","keys","utils","isDeepEqual","o1","o2","_depth","diffs","o1Keys","o2Keys","_i","r","indexOf","merge","_arr","_i2","map","rk","pick","reduce","acc","includes","throwErr","component","msg","error","Error","NODE_PROPS_WHITELIST","_getNodeOpacity","highlightedNode","highlightedLink","config","highlight","highlighted","someNodeHighlighted","initializeGraphState","_ref","graph","data","links","_loop","l","find","_validateGraphData","nodesInputSnapshot","linksInputSnapshot","frx","fry","newConfig","graphNodes","x","y","toString","_initializeNodes","value","_graph","d3Nodes","d3Links","replace","simulation","d3_force","strength","force","newGraphElements","configUpdated","_buildLinks","linksMatrix","linkCallbacks","sourceId","targetId","key","mainNodeParticipates","reasonNode","reasonLink","onClickLink","buildLinkProps","graph_renderer_objectSpread","_buildNodes","nodeCallbacks","nodeState","time","nodeId","isMessage","t","nodeSize","messageProps","sig","substring","isDoubleSpend","buildNodeProps","components_NodeControls","_this$props","doubleSpend","spend","hide","visibleState","react","d2","D3_CONST","FORCE_LINK_STRENGTH","LINK_IDEAL_DISTANCE","SIMULATION_ALPHA_TARGET","getKeyByValue","object","Graph_Graph","Graph","Graph_classCallCheck","Graph_possibleConstructorReturn","Graph_getPrototypeOf","_onDragEnd","alphaTarget","restart","d3_selection","window","on","_onDragMove","ev","index","nodeList","draggedNode","_tick","animate","_onDragStart","pauseSimulation","_setNodeHighlightedValue","updatedNodes","graph_helper_defineProperty","linkId","updatedNode","updateNodeHighlightedValue","setState","_zoomConfig","d3Select","d3_zoom","scaleExtent","_zoomed","d3SelectAll","attr","onMouseOutNode","stop","resetNodesPositions","fx","fy","Reflect","deleteProperty","restartSimulation","constructor","name","paused","nextProps","Graph_objectSpread","messages","speed","wasPaused","tick","nodeID","clickedNode","_graphForcesConfig","bind","getTick","onTick","start","console","log","prevTime","newTime","requestAnimationFrame","nodesDictionary","message","sender","recipient","rcvTime","newTxNode","progress","sentTime","recvTime","splice","deselectNode","_graphRenderer$buildG","buildGraph","nodeControls","maxHeight","maxWidth","viewBox","preserveAspectRatio","forceLink","distance","customNodeDrag","d3_drag","selectAll","components_Controls","onPause","onPauseTxs","togglePopup","pausedTxs","Button","Glyphicon","glyph","es_default","onChange","components_Ledger","Ledger","Ledger_classCallCheck","Ledger_possibleConstructorReturn","Ledger_getPrototypeOf","invalidNonceTxs","newTxs","updatedInvalidNonceTxs","forEach","contents","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","newTx","lodash_default","isEqual","_iterator","Symbol","iterator","next","done","return","_loop2","showState","_this2","icons","updateInvalidNonceTxs","nonceData","from","to","amount","nonceTable","display","backgroundColor","Number","parseInt","slice","textColor","alt","src","e","clicked","components_Ledgers","components_Instructions","show","handleClose","colorPopover","Popover","title","spendPopover","doubleSpendPopover","transactionsPopover","Modal","onHide","Header","closeButton","Title","Body","OverlayTrigger","overlay","Footer","components_TrayButton","TrayButton","TrayButton_classCallCheck","TrayButton_getPrototypeOf","TrayButton_assertThisInitialized","isSelected","styles","borderRadius","components_Tray","selectedNodes","ICONS","Network_data","iconMap","Network_i","createNetSim","Network_step","Network_iterator","Network_iteratorNormalCompletion","Network_node","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","peers","peer","myConfig","alert","components_Network","Network","Network_classCallCheck","Network_possibleConstructorReturn","Network_getPrototypeOf","history","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","oldQ","messageQueue","newQ","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","Network_objectSpread","clone_default","_this$state","setMessageQueue","getNode","currNetwork","agents","_this$state2","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","step","evilNode","drEvil","victims","spends","broadcastTo","currNode","getCurrNode","showPopup","event","raw","scaled","min","max","_this$state3","ref","instance","pause","pauseTxs","stepbackward","stepforward","rewind","fastforward","reset","components_App","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","react_dom_default","render","document","getElementById","URL","origin","addEventListener","fetch","response","status","headers","get","ready","unregister","reload","checkValidServiceWorker","getTxHash","hash","keccak256","getColor","substr","applyInvalidNonceTxs","targetNonce","unsignedTx","sign","privateKey","recover","_","d3","seedrandom","latency","packetLoss","normalRandom","randomNormal","latencyDistribution","newPeer","numConnections","shuffledAgents","shuffle","receiver","_ref2","onReceive","steps"],"mappings":"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","file":"static/js/main.8251e497.chunk.js","sourcesContent":["var EthCrypto = require('eth-crypto')\nvar NetworkSimulator = require('./networksim')\nvar {Node} = require('./nodeAgent')\n\n// Spender is a Node that sends a random transaction at every tick()\nclass Spender extends Node {\n  constructor (wallet, genesis, network) {\n    super(wallet, genesis, network)\n    this.pausedSpending = true\n  }\n\n  // returns a random wallet address (excluding the Spender)\n  getRandomReceiver () {\n    const that = this\n    // create array without this Node\n    const otherNodes = nodes.filter(function (n) {\n      return n.wallet.address !== that.wallet.address\n    });\n    const randomNode = otherNodes[Math.floor(Math.random() * otherNodes.length)]\n    return randomNode.wallet.address\n  }\n\n  tick () {\n    // If we have no money, don't do anything!\n    if (this.state[this.wallet.address].balance < 10 || this.pausedSpending ) {\n      return\n    }\n    // Generate random transaction .5% of the ticks\n    if(Math.random() < 0.01) {\n      const tx = this.generateTx(this.getRandomReceiver(), 10)\n      this.transactions.push(tx)\n      this.applyTransaction(tx)\n      // Broadcast this tx to the network\n      this.network.broadcast(this.pid, tx)\n    }\n  }\n}\n\n// ****** Test this out using a simulated network ****** //\nconst numNodes = 4\nconst wallets = []\nconst genesis = {}\nconst network = new NetworkSimulator(15, 0);\nfor (let i = 0; i < numNodes; i++) {\n  // Create new identity\n  wallets.push(EthCrypto.createIdentity())\n  // Add that node to our genesis block & give them an allocation\n  genesis[wallets[i].address] = {\n    balance: 100,\n    nonce: 0\n  }\n}\nconst nodes = []\n// Create new nodes based on our wallets, and connect them to the network\nfor (let i = 0; i < numNodes; i++) {\n  nodes.push(new Spender(wallets[i], JSON.parse(JSON.stringify(genesis)), network))\n  network.connectPeer(nodes[i], 2)\n}\n\nmodule.exports = {nodes, network}\n","/**\n * @ignore\n * These are common keywords used across rd3g, thus being placed in a more abstract level\n * in the tree directory.\n */\nexport default {\n    SYMBOLS: {\n        CIRCLE: 'circle',\n        CROSS: 'cross',\n        DIAMOND: 'diamond',\n        SQUARE: 'square',\n        STAR: 'star',\n        TRIANGLE: 'triangle',\n        WYE: 'wye'\n    }\n};\n","import CONST from '../../const';\n\nexport default {\n    COORDS_SEPARATOR: ',',\n    FORCE_IDEAL_STRENGTH: -1000, // TODO: Expose as configurable,\n    FORCE_X: 0.06,\n    FORCE_Y: 0.06,\n    GRAPH_CONTAINER_ID: 'graph-container-zoomable',\n    GRAPH_WRAPPER_ID: 'graph-wrapper',\n    KEYWORDS: {\n        SAME: 'SAME'\n    },\n    LINK_CLASS_NAME: 'link',\n    NODE_CLASS_NAME: 'node',\n    ...CONST\n};\n","/**\n * <div style='text-align: right;'><i>This is certainly the only extra piece of documentation that you will ever need</i></div>\n * <br/><br/>\n * Here you can consult a detailed description of each graph configurable property as well as the default values\n * of those properties.\n *\n * **Note about performance**<br/>\n * Some of the properties have a major performance impact when toggled while rendering graphs of medium or large dimensions (hundreds or thousand of elements).\n * These properties are marked with 🚅🚅🚅.<br/>\n * ⭐ **tip** *to achieve smoother interactions you may want to provide a toggle to set **staticGraph** to **true** *<br/>\n * <br/>\n * **Note about granularity**<br/>\n * Some of the properties listed in the {@link #node-section|Node section} are marked with 🔍🔍🔍. This means that this properties\n * have a higher level of granularity. These properties can be defined in the graph payload at a node level. (sample payload below)\n * ```javascript\n * const graph = {\n *     nodes: [\n *         {\n *             id: 'id',\n *             color: 'red',         // only this node will be red\n *             size: 300,            // only this node will have size 300\n *             symbolType: 'diamond' // only this node will have 'diamond' shape\n *         }\n *     ],\n *     links: [...]\n * };\n * ```\n *\n * <h2>Graph global configurations</h2>\n * @param {boolean} [automaticRearrangeAfterDropNode=false] - 🚅🚅🚅 when true performing a node drag and drop should automatically\n * rearrange all nodes positions based on new position of dragged node (note: **staticGraph** should be false).\n * @param {number} [height=400] - the height of the (svg) area where the graph will be rendered.\n * @param {boolean} [nodeHighlightBehavior=false] - 🚅🚅🚅 when user mouse hovers a node that node and adjacent common\n * connections will be highlighted (depending on the *highlightDegree* value). All the remaining nodes and links assume opacity value equal to **highlightOpacity**.\n * @param {boolean} [linkHighlightBehavior=false] - 🚅🚅🚅 when the user mouse hovers some link that link and the correspondent nodes will be highlighted, this is a similar behavior\n * to *nodeHighlightBehavior* but for links <small>(just for historical reference this property was introduced in **v1.0.0**)</small>.\n * @param {number} [highlightDegree=1] - **Possible values: 0, 1 or 2**. This value represents the range of the\n * highlight behavior when some node is highlighted. If the value is set to **0** only the selected node will be\n * highlighted. If the value is set to **1** the selected node and his 1st degree connections will be highlighted. If\n * the value is set to **2** the selected node will be highlighted as well as the 1st and 2nd common degree connections.\n * @param {number} [highlightOpacity=1] - this value is used to highlight nodes in the network. The lower\n * the value the more the less highlighted nodes will be visible (related to *nodeHighlightBehavior*).\n * @param {number} [maxZoom=8] - max zoom that can be performed against the graph.\n * @param {number} [minZoom=0.1] - min zoom that can be performed against the graph.\n * @param {boolean} [panAndZoom=false] - 🚅🚅🚅 pan and zoom effect when performing zoom in the graph,\n * a similar functionality may be consulted {@link https://bl.ocks.org/mbostock/2a39a768b1d4bc00a09650edef75ad39|here}.\n * @param {boolean} [staticGraph=false] - when setting this value to true the graph will be completely static, thus\n * all forces and drag events upon nodes will produce not effect. Note that, if this value is true the nodes will be\n * rendered with the initial provided **x and y coordinates** (links positions will be automatically set\n * from the given nodes positions by rd3g), no coordinates will be calculated by rd3g or subjacent d3 modules.\n * @param {number} [width=800] - the width of the (svg) area where the graph will be rendered.\n * <br/>\n * @param {Object} node node object is explained in next section. ⬇️\n * <h2 id=\"node-section\">Node level configurations</h2>\n * @param {string} [node.color='#d3d3d3'] - 🔍🔍🔍 this is the color that will be applied to the node if no **color property**\n * is found inside the node itself (yes **you can pass a property 'color' inside the node and that color will override the\n * this default one**).\n * @param {string} [node.fontColor='black'] - 🔍🔍🔍 fill color for node's <text> svg label.\n * @param {number} [node.fontSize=10] - {@link https://developer.mozilla.org/en-US/docs/Web/CSS/font-size?v=control|font-size}\n * property for all nodes' labels.\n * @param {string} [node.fontWeight='normal'] - {@link https://developer.mozilla.org/en/docs/Web/CSS/font-weight?v=control|font-weight}\n * property for all nodes' labels.\n * @param {string} [node.highlightColor='SAME'] - color for all highlighted nodes (use string 'SAME' if you\n * want the node to keep its color in highlighted state).\n * @param {number} [node.highlightFontSize=8] - fontSize in highlighted state.\n * @param {string} [node.highlightFontWeight='normal'] - fontWeight in highlighted state.\n * @param {string} [node.highlightStrokeColor='SAME'] - strokeColor in highlighted state.\n * @param {number} [node.highlightStrokeWidth=1.5] - strokeWidth in highlighted state.\n * @param {string} [node.labelProperty='id'] - this is the node property that will be used in runtime to\n * fetch the label content. You just need to add some property (e.g. firstName) to the node payload and then set\n * node.labelProperty to be **'firstName'**.\n * @param {string} [node.mouseCursor='pointer'] - {@link https://developer.mozilla.org/en/docs/Web/CSS/cursor?v=control|cursor}\n * property for when some node is mouse hovered.\n * @param {number} [node.opacity=1] - by default all nodes will have this opacity value.\n * @param {boolean} [node.renderLabel=true] - when set to false no labels will appear along side nodes in the\n * graph.\n * @param {number} [node.size=200] - 🔍🔍🔍 defines the size of all nodes.\n * @param {string} [node.strokeColor='none'] - color for the stroke of each node.\n * @param {number} [node.strokeWidth=1.5] - the width of the all node strokes.\n * @param {string} [node.svg=''] - 🔍🔍🔍 render custom svg for nodes in alternative to **node.symbolType**. This svg can\n * be provided as a string to either a remote svg resource or for a local one.\n * <br/>\n * <img src=\"https://github.com/danielcaldas/react-d3-graph/blob/master/docs/rd3g-custom-svg.gif?raw=true\" width=\"820\" height=\"480\"/>\n * @param {string} [node.symbolType='circle'] - 🔍🔍🔍 the <span id='node-symbol-type'>shape</span> of the node.\n * Use the following values under a property **type** inside each node (nodes may have different types, same as colors):\n *   - 'circle'\n *   - 'cross'\n *   - 'diamond'\n *   - 'square'\n *   - 'star'\n *   - 'triangle'\n *   - 'wye'\n *\n * **[note]** react-d3-graph will map this values to [d3 symbols](https://github.com/d3/d3-shape#symbols)\n * <br/>\n * @param {Object} link link object is explained in the next section. ⬇️\n * <h2>Link level configurations</h2>\n * @param {string} [link.color='#d3d3d3'] - 🚅🚅🚅 the color for links\n * (from version 1.3.0 this property can be configured at link level).\n * @param {number} [link.opacity=1] - the default opacity value for links.\n * @param {boolean} [link.semanticStrokeWidth=false] - when set to true all links will have\n * *\"semantic width\"*, this means that the width of the connections will be proportional to the value of each link.\n * This is how link strokeWidth will be calculated:\n * ```javascript\n * strokeWidth += (linkValue * strokeWidth) / 10;\n * ```\n * @param {number} [link.strokeWidth=1.5] - strokeWidth for all links. By default the actual value is obtain by the\n * following expression:\n * ```javascript\n * link.strokeWidth * (1 / transform); // transform is a zoom delta Δ value\n * ```\n * @param {string} [link.highlightColor='#d3d3d3'] - links' color in highlight state.\n *\n * @example\n * // A simple config that uses some properties\n * const myConfig = {\n *     nodeHighlightBehavior: true,\n *     node: {\n *         color: 'lightgreen',\n *         size: 120,\n *         highlightStrokeColor: 'blue'\n *     },\n *     link: {\n *         highlightColor: 'lightblue'\n *     }\n * };\n *\n * // Sorry for the long config description, here's a potato 🥔.\n */\nexport default {\n    automaticRearrangeAfterDropNode: false,\n    height: 1000,\n    highlightDegree: 1,\n    highlightOpacity: 1,\n    linkHighlightBehavior: false,\n    maxZoom: 8,\n    minZoom: 1,\n    nodeHighlightBehavior: false,\n    panAndZoom: false,\n    staticGraph: false,\n    width: 1000,\n    node: {\n        color: '#d3d3d3',\n        fontColor: 'black',\n        fontSize: 8,\n        fontWeight: 'normal',\n        highlightColor: 'SAME',\n        highlightFontSize: 8,\n        highlightFontWeight: 'normal',\n        highlightStrokeColor: 'SAME',\n        highlightStrokeWidth: 1.5,\n        labelProperty: 'id',\n        mouseCursor: 'pointer',\n        opacity: 1,\n        renderLabel: true,\n        size: 200,\n        strokeColor: 'none',\n        strokeWidth: 1.5,\n        svg: '',\n        symbolType: 'circle'\n    },\n    link: {\n        color: '#000000',\n        opacity: 1,\n        semanticStrokeWidth: false,\n        strokeWidth: 1.5,\n        highlightColor: '#d3d3d3'\n    }\n};\n\n","/*eslint max-len: [\"error\", 200]*/\nexport default {\n    GRAPH_NO_ID_PROP: 'id prop not defined! id property is mandatory and it should be unique.',\n    INVALID_LINKS:\n        'you provided a invalid links data structure. Links source and target attributes must point to an existent node',\n    INSUFFICIENT_DATA:\n        'you have not provided enough data for react-d3-graph to render something. You need to provide at least one node'\n};\n","import React from 'react';\n\n/**\n * Link component is responsible for encapsulating link render.\n * @example\n * const onClickLink = function(source, target) {\n *      window.alert(`Clicked link between ${source} and ${target}`);\n * };\n *\n * const onMouseOverLink = function(source, target) {\n *      window.alert(`Mouse over in link between ${source} and ${target}`);\n * };\n *\n * const onMouseOutLink = function(source, target) {\n *      window.alert(`Mouse out link between ${source} and ${target}`);\n * };\n *\n * <Link\n *     source='idSourceNode'\n *     target='idTargetNode'\n *     x1=22\n *     y1=22\n *     x2=22\n *     y2=22\n *     strokeWidth=1.5\n *     stroke='green'\n *     className='link'\n *     opacity=1\n *     onClickLink={onClickLink}\n *     onMouseOverLink={onMouseOverLink}\n *     onMouseOutLink={onMouseOutLink} />\n */\nexport default class Link extends React.Component {\n    /**\n     * Handle link click event.\n     * @returns {undefined}\n     */\n    // handleOnClickLink = () => this.props.onClickLink\n    //                         && this.props.onClickLink(this.props.source, this.props.target);\n\n    /**\n     * Handle mouse over link event.\n     * @returns {undefined}\n     */\n    handleOnMouseOverLink = () => this.props.onMouseOverLink\n                            && this.props.onMouseOverLink(this.props.source, this.props.target);\n\n    /**\n     * Handle mouse out link event.\n     * @returns {undefined}\n     */\n    handleOnMouseOutLink = () => this.props.onMouseOutLink\n                            && this.props.onMouseOutLink(this.props.source, this.props.target);\n\n    render() {\n        const lineStyle = {\n            strokeWidth: this.props.strokeWidth,\n            stroke: this.props.stroke,\n            opacity: this.props.opacity\n        };\n\n        const lineProps = {\n            className: this.props.className,\n            onClick: this.handleOnClickLink,\n            onMouseOut: this.handleOnMouseOutLink,\n            onMouseOver: this.handleOnMouseOverLink,\n            style: lineStyle,\n            x1: this.props.x1,\n            x2: this.props.x2,\n            y1: this.props.y1,\n            y2: this.props.y2\n        };\n\n        return (\n            <line {...lineProps} />\n        );\n    }\n}\n","import CONFIG from '../graph/graph.config';\nimport CONST from '../../const';\n\nexport default {\n    ARC: {\n        START_ANGLE: 0,\n        END_ANGLE: 2 * Math.PI\n    },\n    DEFAULT_NODE_SIZE: CONFIG.node.size,\n    NODE_LABEL_DX: '.90em',\n    NODE_LABEL_DY: '.35em',\n    ...CONST\n};\n","/**\n * @module Node/helper\n * @description\n * Some methods that help no the process of rendering a node.\n */\nimport {\n    symbolCircle as d3SymbolCircle,\n    symbolCross as d3SymbolCross,\n    symbolDiamond as d3SymbolDiamond,\n    symbolSquare as d3SymbolSquare,\n    symbolStar as d3SymbolStar,\n    symbolTriangle as d3SymbolTriangle,\n    symbolWye as d3SymbolWye,\n    symbol as d3Symbol\n} from 'd3-shape';\n\nimport CONST from './node.const';\n\n/**\n * Converts a string that specifies a symbol into a concrete instance\n * of d3 symbol.<br/>\n * {@link https://github.com/d3/d3-shape/blob/master/README.md#symbol}\n * @param  {string} typeName - the string that specifies the symbol type (should be one of {@link #node-symbol-type|node.symbolType}).\n * @returns {Object} concrete instance of d3 symbol (defaults to circle).\n * @memberof Node/helper\n */\nfunction _convertTypeToD3Symbol(typeName) {\n    switch (typeName) {\n        case CONST.SYMBOLS.CIRCLE:\n            return d3SymbolCircle;\n        case CONST.SYMBOLS.CROSS:\n            return d3SymbolCross;\n        case CONST.SYMBOLS.DIAMOND:\n            return d3SymbolDiamond;\n        case CONST.SYMBOLS.SQUARE:\n            return d3SymbolSquare;\n        case CONST.SYMBOLS.STAR:\n            return d3SymbolStar;\n        case CONST.SYMBOLS.TRIANGLE:\n            return d3SymbolTriangle;\n        case CONST.SYMBOLS.WYE:\n            return d3SymbolWye;\n        default:\n            return d3SymbolCircle;\n    }\n}\n\n/**\n * Build a d3 svg symbol based on passed symbol and symbol type.\n * @param  {number} [size=80] - the size of the symbol.\n * @param  {string} [symbolTypeDesc='circle'] - the string containing the type of symbol that we want to build\n * (should be one of {@link #node-symbol-type|node.symbolType}).\n * @returns {Object} concrete instance of d3 symbol.\n * @memberof Node/helper\n */\nfunction buildSvgSymbol(size = CONST.DEFAULT_NODE_SIZE, symbolTypeDesc = CONST.SYMBOLS.CIRCLE) {\n    return d3Symbol()\n        .size(() => size)\n        .type(() => _convertTypeToD3Symbol(symbolTypeDesc))();\n}\n\nexport default {\n    buildSvgSymbol\n};\n","import React from 'react';\n\nimport CONST from './node.const';\n\nimport nodeHelper from './node.helper';\n\n/**\n * Node component is responsible for encapsulating node render.\n * @example\n * const onClickNode = function(nodeId) {\n *      window.alert('Clicked node', nodeId);\n * };\n *\n * const onMouseOverNode = function(nodeId) {\n *      window.alert('Mouse over node', nodeId);\n * };\n *\n * const onMouseOutNode = function(nodeId) {\n *      window.alert('Mouse out node', nodeId);\n * };\n *\n * <Node\n *     id='nodeId'\n *     cx=22\n *     cy=22\n *     fill='green'\n *     fontSize=10\n *     fontColor='black'\n *     fontWeight='normal'\n *     dx=90\n *     label='label text'\n *     opacity=1\n *     renderLabel=true\n *     size=200\n *     stroke='none'\n *     strokeWidth=1.5\n *     svg='assets/my-svg.svg'\n *     type='square'\n *     className='node'\n *     onClickNode={onClickNode}\n *     onMouseOverNode={onMouseOverNode}\n *     onMouseOutNode={onMouseOutNode} />\n */\nexport default class Node extends React.Component {\n    /**\n     * Handle click on the node.\n     * @returns {undefined}\n     */\n    handleOnClickNode = () => this.props.onClickNode && this.props.onClickNode(this.props.id);\n\n    /**\n     * Handle mouse over node event.\n     * @returns {undefined}\n     */\n    handleOnMouseOverNode = () => this.props.onMouseOverNode && this.props.onMouseOverNode(this.props.id);\n\n    /**\n     * Handle mouse out node event.\n     * @returns {undefined}\n     */\n    handleOnMouseOutNode = () => this.props.onMouseOut && this.props.onMouseOut(this.props.id);\n\n    render() {\n\n        const nodeProps = {\n            cursor: this.props.cursor,\n            onClick: this.handleOnClickNode,\n            onMouseOut: this.handleOnMouseOutNode,\n            onMouseOver: this.handleOnMouseOverNode,\n            opacity: this.props.opacity\n        };\n\n        const textProps = {\n            dx: this.props.dx || CONST.NODE_LABEL_DX,\n            dy: CONST.NODE_LABEL_DY,\n            fill: this.props.fontColor,\n            fontSize: this.props.fontSize,\n            fontWeight: this.props.fontWeight,\n            opacity: this.props.opacity\n        };\n\n        const size = this.props.size;\n        let gtx = this.props.cx;\n        let gty = this.props.cy;\n        let label;\n        let node;\n        let gerbil;\n\n        if (this.props.svg) {\n            const height = size / 10;\n            const width = size / 10;\n            const tx = width / 2;\n            const ty = height / 2;\n            const transform = `translate(${tx},${ty})`;\n\n            label = (\n                <text {...textProps} transform={transform}>\n                    {this.props.label}\n                </text>\n            );\n            node = <image {...nodeProps} href={this.props.svg} width={width} height={height} />;\n\n            // svg offset transform regarding svg width/height\n            gtx -= tx;\n            gty -= ty;\n        } else {\n            if (this.props.gerbil) {\n\n                const height = size / 27;\n                const width = size / 27;\n                const tx = width / 2;\n                const ty = height / 2;\n                const transform = `translate(${tx},${ty})`;\n\n                label = (\n                    <text {...textProps} transform={transform}>\n                        {this.props.label}\n                    </text>\n                );\n                gerbil = <g transform= {'translate(' + -tx + ',' +  -ty + ')'}><image {...nodeProps} href={this.props.gerbil} width={width} height={height} /></g>;\n            }\n\n            nodeProps.d = nodeHelper.buildSvgSymbol(size, this.props.type);\n            nodeProps.fill = this.props.fill;\n            nodeProps.stroke = this.props.stroke;\n            nodeProps.strokeWidth = this.props.strokeWidth;\n            label = <text {...textProps}>{this.props.label}</text>;\n            node = <path {...nodeProps} />;\n        }\n\n        const gProps = {\n            className: this.props.className,\n            cx: this.props.cx,\n            cy: this.props.cy,\n            id: this.props.id,\n            transform: `translate(${gtx},${gty})`\n        };\n\n        return (\n            <g {...gProps}>\n                {node}\n                {this.props.renderLabel && label}\n                {gerbil}\n            </g>\n        );\n    }\n}\n","/**\n * @module utils\n * @description\n * Offers a series of generic methods for object manipulation, and other operations\n * that are common across rd3g such as error logging.\n */\n\n// This variable assures that recursive methods such as merge and isDeepEqual do not fall on\n// circular JSON structure evaluation.\nconst MAX_DEPTH = 20;\n\n/**\n * Checks whether a certain object property is from object type and is a non empty object.\n * @param  {Object} o - the object.\n * @param  {string} k - the object property.\n * @returns {boolean} returns true if o[k] is an non empty object.\n * @memberof utils\n */\nfunction _isPropertyNestedObject(o, k) {\n    return o.hasOwnProperty(k) && typeof o[k] === 'object' && o[k] !== null && !isObjectEmpty(o[k]);\n}\n\n/**\n * Generic deep comparison between javascript simple or complex objects.\n * @param  {Object} o1 - one of the objects to be compared.\n * @param  {Object} o2 - second object to compare with first.\n * @param  {number} [_depth=0] - this parameter serves only for internal usage.\n * @returns {boolean} returns true if o1 and o2 have exactly the same content, or are exactly the same object reference.\n * @memberof utils\n */\nfunction isDeepEqual(o1, o2, _depth = 0) {\n    let diffs = [];\n\n    if (_depth === 0 && o1 === o2) {\n        return true;\n    }\n\n    if ((isObjectEmpty(o1) && !isObjectEmpty(o2)) || (!isObjectEmpty(o1) && isObjectEmpty(o2))) {\n        return false;\n    }\n\n    const o1Keys = Object.keys(o1);\n    const o2Keys = Object.keys(o2);\n\n    if (o1Keys.length !== o2Keys.length) {\n        return false;\n    }\n\n    for (let k of o1Keys) {\n        const nestedO = _isPropertyNestedObject(o1, k) && _isPropertyNestedObject(o2, k);\n\n        if (nestedO && _depth < MAX_DEPTH) {\n            diffs.push(isDeepEqual(o1[k], o2[k], _depth + 1));\n        } else {\n            const r = (isObjectEmpty(o1[k]) && isObjectEmpty(o2[k])) || (o2.hasOwnProperty(k) && o2[k] === o1[k]);\n\n            diffs.push(r);\n\n            if (!r) {\n                break;\n            }\n        }\n    }\n\n    return diffs.indexOf(false) === -1;\n}\n\n/**\n * Checks whether or not a certain object is empty.\n * NOTE: If the passed parameter is not an object the method return false.\n * @param  {Object}  o - object whom emptiness we want to check.\n * @returns {boolean} true if the given object is n ft and object and is empty.\n * @memberof utils\n */\nfunction isObjectEmpty(o) {\n    return !!o && typeof o === 'object' && !Object.keys(o).length;\n}\n\n/**\n * This function merges two objects o1 and o2, where o2 properties override existent o1 properties, and\n * if o2 doesn't posses some o1 property the fallback will be the o1 property.\n * @param  {Object} o1 - object.\n * @param  {Object} o2 - object that will override o1 properties.\n * @param  {int} [_depth=0] - the depth at which we are merging the object.\n * @returns {Object} object that is the result of merging o1 and o2, being o2 properties priority overriding\n * existent o1 properties.\n * @memberof utils\n */\nfunction merge(o1 = {}, o2 = {}, _depth = 0) {\n    let o = {};\n\n    if (Object.keys(o1 || {}).length === 0) {\n        return o2 && !isObjectEmpty(o2) ? o2 : {};\n    }\n\n    for (let k of Object.keys(o1)) {\n        const nestedO = !!(o2[k] && typeof o2[k] === 'object' && typeof o1[k] === 'object' && _depth < MAX_DEPTH);\n\n        if (nestedO) {\n            const r = merge(o1[k], o2[k], _depth + 1);\n\n            o[k] =\n                o1[k].hasOwnProperty('length') && o2[k].hasOwnProperty('length') ? Object.keys(r).map(rk => r[rk]) : r;\n        } else {\n            o[k] = o2.hasOwnProperty(k) ? o2[k] : o1[k];\n        }\n    }\n\n    return o;\n}\n\n/**\n * Create new object from the inputted one only with the props passed\n * in the props list.\n * @param {Object} o - the object to pick props from.\n * @param {Array.<string>} props - list of props that we want to pick from o.\n * @returns {Object} the object resultant from the picking operation.\n * @memberof utils\n */\nfunction pick(o, props) {\n    return Object.keys(o).reduce((acc, k) => {\n        if (o.hasOwnProperty(k) && props.includes(k)) {\n            acc[k] = o[k];\n        }\n\n        return acc;\n    }, {});\n}\n\n/**\n * Helper function for customized error logging.\n * @param  {string} component - the name of the component where the error is to be thrown.\n * @param  {string} msg - the message contain a more detailed explanation about the error.\n * @returns {Error} the thrown error.\n * @memberof utils\n */\nfunction throwErr(component, msg) {\n    const error = `react-d3-graph :: ${component} :: ${msg}`;\n\n    throw Error(error);\n}\n\nexport default {\n    isDeepEqual,\n    isObjectEmpty,\n    merge,\n    pick,\n    throwErr\n};\n","/**\n * @module Graph/helper\n * @description\n * Offers a series of methods that isolate logic of Graph component and also from Graph rendering methods.\n */\n/**\n * @typedef {Object} Link\n * @property {string} source - the node id of the source in the link.\n * @property {string} target - the node id of the target in the link.\n * @memberof Graph/helper\n */\n/**\n * @typedef {Object} Node\n * @property {string} id - the id of the node.\n * @property {string} [color=] - color of the node (optional).\n * @property {string} [fontColor=] - node text label font color (optional).\n * @property {string} [size=] - size of the node (optional).\n * @property {string} [symbolType=] - symbol type of the node (optional).\n * @property {string} [svg=] - custom svg for node (optional).\n * @memberof Graph/helper\n */\nimport {\n    forceX as d3ForceX,\n    forceY as d3ForceY,\n    forceSimulation as d3ForceSimulation,\n    forceManyBody as d3ForceManyBody\n} from 'd3-force';\n\nimport CONST from './graph.const';\nimport DEFAULT_CONFIG from './graph.config';\nimport ERRORS from '../../err';\n\nimport utils from '../../utils';\n\nconst NODE_PROPS_WHITELIST = ['id', 'highlighted', 'x', 'y', 'index', 'vy', 'vx'];\n\n/**\n * Create d3 forceSimulation to be applied on the graph.<br/>\n * {@link https://github.com/d3/d3-force#forceSimulation|d3-force#forceSimulation}<br/>\n * {@link https://github.com/d3/d3-force#simulation_force|d3-force#simulation_force}<br/>\n * Wtf is a force? {@link https://github.com/d3/d3-force#forces| here}\n * @param  {number} width - the width of the container area of the graph.\n * @param  {number} height - the height of the container area of the graph.\n * @returns {Object} returns the simulation instance to be consumed.\n * @memberof Graph/helper\n */\nfunction _createForceSimulation(width, height) {\n    const frx = d3ForceX(width / 2).strength(CONST.FORCE_X);\n    const fry = d3ForceY(height / 2).strength(CONST.FORCE_Y);\n\n    return d3ForceSimulation()\n        .force('charge', d3ForceManyBody().strength(CONST.FORCE_IDEAL_STRENGTH))\n        .force('x', frx)\n        .force('y', fry);\n}\n\n/**\n * Get the correct node opacity in order to properly make decisions based on context such as currently highlighted node.\n * @param  {Object} node - the node object for whom we will generate properties.\n * @param  {string} highlightedNode - same as {@link #buildGraph|highlightedNode in buildGraph}.\n * @param  {Object} highlightedLink - same as {@link #buildGraph|highlightedLink in buildGraph}.\n * @param  {Object} config - same as {@link #buildGraph|config in buildGraph}.\n * @returns {number} the opacity value for the given node.\n * @memberof Graph/helper\n */\nfunction _getNodeOpacity(node, highlightedNode, highlightedLink, config) {\n    const highlight =\n        node.highlighted ||\n        node.id === (highlightedLink && highlightedLink.source) ||\n        node.id === (highlightedLink && highlightedLink.target);\n    const someNodeHighlighted = !!(\n        highlightedNode ||\n        (highlightedLink && highlightedLink.source && highlightedLink.target)\n    );\n    let opacity;\n\n    if (someNodeHighlighted && config.highlightDegree === 0) {\n        opacity = highlight ? config.node.opacity : config.highlightOpacity;\n    } else if (someNodeHighlighted) {\n        opacity = highlight ? config.node.opacity : config.highlightOpacity;\n    } else {\n        opacity = config.node.opacity;\n    }\n\n    return opacity;\n}\n\n/**\n * Receives a matrix of the graph with the links source and target as concrete node instances and it transforms it\n * in a lightweight matrix containing only links with source and target being strings representative of some node id\n * and the respective link value (if non existent will default to 1).\n * @param  {Array.<Link>} graphLinks - an array of all graph links.\n * @returns {Object.<string, Object>} an object containing a matrix of connections of the graph, for each nodeId,\n * there is an object that maps adjacent nodes ids (string) and their values (number).\n * @memberof Graph/helper\n */\nfunction _initializeLinks(graphLinks) {\n    return graphLinks.reduce((links, l) => {\n        const source = l.source.id || l.source;\n        const target = l.target.id || l.target;\n\n        if (!links[source]) {\n            links[source] = {};\n        }\n\n        if (!links[target]) {\n            links[target] = {};\n        }\n\n        // TODO: If the graph is directed this should be adapted\n        links[source][target] = links[target][source] = l.value || 1;\n\n        return links;\n    }, {});\n}\n\n/**\n * Method that initialize graph nodes provided by rd3g consumer and adds additional default mandatory properties\n * that are optional for the user. Also it generates an index mapping, this maps nodes ids the their index in the array\n * of nodes. This is needed because d3 callbacks such as node click and link click return the index of the node.\n * @param  {Array.<Node>} graphNodes - the array of nodes provided by the rd3g consumer.\n * @returns {Object.<string, Object>} returns the nodes ready to be used within rd3g with additional properties such as x, y\n * and highlighted values.\n * @memberof Graph/helper\n */\nfunction _initializeNodes(graphNodes) {\n    let nodes = {};\n    const n = graphNodes.length;\n\n    for (let i = 0; i < n; i++) {\n        const node = graphNodes[i];\n\n        node.highlighted = false;\n\n        if (!node.hasOwnProperty('x')) {\n            node.x = 0;\n        }\n        if (!node.hasOwnProperty('y')) {\n            node.y = 0;\n        }\n\n        nodes[node.id.toString()] = node;\n    }\n\n    return nodes;\n}\n\n/**\n * Some integrity validations on links and nodes structure. If some validation fails the function will\n * throw an error.\n * @param  {Object} data - Same as {@link #initializeGraphState|data in initializeGraphState}.\n * @memberof Graph/helper\n * @throws can throw the following error msg:\n * INSUFFICIENT_DATA - msg if no nodes are provided\n * INVALID_LINKS - if links point to nonexistent nodes\n * @returns {undefined}\n */\nfunction _validateGraphData(data) {\n    if (!data.nodes || !data.nodes.length) {\n        utils.throwErr('Graph', ERRORS.INSUFFICIENT_DATA);\n    }\n\n    const n = data.links.length;\n\n    for (let i = 0; i < n; i++) {\n        const l = data.links[i];\n\n        if (!data.nodes.find(n => n.id === l.source)) {\n            utils.throwErr('Graph', `${ERRORS.INVALID_LINKS} - \"${l.source}\" is not a valid source node id`);\n        }\n        if (!data.nodes.find(n => n.id === l.target)) {\n            utils.throwErr('Graph', `${ERRORS.INVALID_LINKS} - \"${l.target}\" is not a valid target node id`);\n        }\n    }\n}\n\n/**\n * Build some Link properties based on given parameters.\n * @param  {Object} link - the link object for which we will generate properties.\n * @param  {Object.<string, Object>} nodes - same as {@link #buildGraph|nodes in buildGraph}.\n * @param  {Object.<string, Object>} links - same as {@link #buildGraph|links in buildGraph}.\n * @param  {Object} config - same as {@link #buildGraph|config in buildGraph}.\n * @param  {Function[]} linkCallbacks - same as {@link #buildGraph|linkCallbacks in buildGraph}.\n * @param  {string} highlightedNode - same as {@link #buildGraph|highlightedNode in buildGraph}.\n * @param  {Object} highlightedLink - same as {@link #buildGraph|highlightedLink in buildGraph}.\n * @param  {number} transform - value that indicates the amount of zoom transformation.\n * @returns {Object} returns an object that aggregates all props for creating respective Link component instance.\n * @memberof Graph/helper\n */\nfunction buildLinkProps(link, nodes, links, config, linkCallbacks, highlightedNode, highlightedLink, transform) {\n    const { source, target } = link;\n\n    const x1 = (nodes[source] && nodes[source].x) || 0;\n    const y1 = (nodes[source] && nodes[source].y) || 0;\n    const x2 = (nodes[target] && nodes[target].x) || 0;\n    const y2 = (nodes[target] && nodes[target].y) || 0;\n\n    let mainNodeParticipates = false;\n\n    switch (config.highlightDegree) {\n        case 0:\n            break;\n        case 2:\n            mainNodeParticipates = true;\n            break;\n        default:\n            // 1st degree is the fallback behavior\n            mainNodeParticipates = source === highlightedNode || target === highlightedNode;\n            break;\n    }\n\n    const reasonNode = mainNodeParticipates && nodes[source].highlighted && nodes[target].highlighted;\n    const reasonLink =\n        source === (highlightedLink && highlightedLink.source) &&\n        target === (highlightedLink && highlightedLink.target);\n    const highlight = reasonNode || reasonLink;\n\n    let opacity = config.link.opacity;\n\n    if (highlightedNode || (highlightedLink && highlightedLink.source)) {\n        opacity = highlight ? config.link.opacity : config.highlightOpacity;\n    }\n\n    let stroke = link.color || config.link.color;\n\n    if (highlight) {\n        stroke = config.link.highlightColor === CONST.KEYWORDS.SAME ? config.link.color : config.link.highlightColor;\n    }\n\n    let strokeWidth = config.link.strokeWidth * (1 / transform);\n\n    if (config.link.semanticStrokeWidth) {\n        const linkValue = links[source][target] || links[target][source] || 1;\n\n        strokeWidth += linkValue * strokeWidth / 10;\n    }\n\n    return {\n        source,\n        target,\n        x1,\n        y1,\n        x2,\n        y2,\n        strokeWidth,\n        stroke,\n        className: CONST.LINK_CLASS_NAME,\n        opacity,\n        onClickLink: linkCallbacks.onClickLink,\n        onMouseOverLink: linkCallbacks.onMouseOverLink,\n        onMouseOutLink: linkCallbacks.onMouseOutLink\n    };\n}\n\n/**\n * Build some Node properties based on given parameters.\n * @param  {Object} node - the node object for whom we will generate properties.\n * @param  {Object} config - same as {@link #buildGraph|config in buildGraph}.\n * @param  {Function[]} nodeCallbacks - same as {@link #buildGraph|nodeCallbacks in buildGraph}.\n * @param  {string} highlightedNode - same as {@link #buildGraph|highlightedNode in buildGraph}.\n * @param  {Object} highlightedLink - same as {@link #buildGraph|highlightedLink in buildGraph}.\n * @param  {number} transform - value that indicates the amount of zoom transformation.\n * @returns {Object} returns object that contain Link props ready to be feeded to the Link component.\n * @memberof Graph/helper\n */\nfunction buildNodeProps(node, config, nodeCallbacks = {}, highlightedNode, highlightedLink, transform) {\n    const highlight =\n        node.highlighted ||\n        (node.id === (highlightedLink && highlightedLink.source) ||\n            node.id === (highlightedLink && highlightedLink.target));\n    const opacity = _getNodeOpacity(node, highlightedNode, highlightedLink, config);\n    let fill = node.color || config.node.color;\n\n    if (highlight && config.node.highlightColor !== CONST.KEYWORDS.SAME) {\n        fill = config.node.highlightColor;\n    }\n\n    let stroke = config.node.strokeColor;\n\n    if (highlight && config.node.highlightStrokeColor !== CONST.KEYWORDS.SAME) {\n        stroke = config.node.highlightStrokeColor;\n    }\n\n    const t = 1 / transform;\n    const nodeSize = node.size || config.node.size;\n    const fontSize = highlight ? config.node.highlightFontSize : config.node.fontSize;\n    const dx = fontSize * t + nodeSize / 100 + 1.5;\n    const strokeWidth = highlight ? config.node.highlightStrokeWidth : config.node.strokeWidth;\n    const svg = node.svg || config.node.svg;\n    const gerbil = node.gerbil\n    const fontColor = node.fontColor || config.node.fontColor;\n\n    return {\n        className: CONST.NODE_CLASS_NAME,\n        cursor: config.node.mouseCursor,\n        cx: (node && node.x) || '0',\n        cy: (node && node.y) || '0',\n        fill,\n        fontColor,\n        fontSize: fontSize * t,\n        dx,\n        fontWeight: highlight ? config.node.highlightFontWeight : config.node.fontWeight,\n        gerbil,\n        id: node.id,\n        label: node[config.node.labelProperty] || node.id,\n        onClickNode: nodeCallbacks.onClickNode,\n        onMouseOverNode: nodeCallbacks.onMouseOverNode,\n        onMouseOut: nodeCallbacks.onMouseOut,\n        opacity,\n        renderLabel: config.node.renderLabel,\n        size: nodeSize * t,\n        stroke,\n        strokeWidth: strokeWidth * t,\n        svg,\n        type: node.symbolType || config.node.symbolType\n    };\n}\n\nfunction messageProps(node, config, nodeCallbacks = {}, highlightedNode, highlightedLink, transform) {\n    const highlight =\n        node.highlighted ||\n        (node.id === (highlightedLink && highlightedLink.source) ||\n            node.id === (highlightedLink && highlightedLink.target));\n    const opacity = _getNodeOpacity(node, highlightedNode, highlightedLink, config);\n    // let fill = node.color || config.node.color;\n\n    // if (highlight && config.node.highlightColor !== CONST.KEYWORDS.SAME) {\n    //     fill = config.node.highlightColor;\n    // }\n\n    let stroke = config.node.strokeColor;\n\n    if (highlight && config.node.highlightStrokeColor !== CONST.KEYWORDS.SAME) {\n        stroke = config.node.highlightStrokeColor;\n    }\n\n    const t = 1 / transform;\n    const nodeSize = node.size || config.node.size;\n    const fontSize = highlight ? config.node.highlightFontSize : config.node.fontSize;\n    const dx = fontSize * t + nodeSize / 100 + 1.5;\n    const strokeWidth = highlight ? config.node.highlightStrokeWidth : config.node.strokeWidth;\n    const svg = node.svg || config.node.svg;\n    const fontColor = node.fontColor || config.node.fontColor;\n\n    return {\n        className: CONST.NODE_CLASS_NAME,\n        cursor: config.node.mouseCursor,\n        cx: (node && node.x) || '0',\n        cy: (node && node.y) || '0',\n        fill: '#00FF1E',\n        fontColor,\n        fontSize: 0,\n        dx,\n        fontWeight: highlight ? config.node.highlightFontWeight : config.node.fontWeight,\n        id: node.id,\n        label: \"\",\n        onClickNode: nodeCallbacks.onClickNode,\n        onMouseOverNode: nodeCallbacks.onMouseOverNode,\n        onMouseOut: nodeCallbacks.onMouseOut,\n        opacity,\n        renderLabel: config.node.renderLabel,\n        size: 15.0 * t,\n        stroke,\n        strokeWidth: strokeWidth * t,\n        svg,\n        type: node.symbolType || config.node.symbolType\n    };\n}\n\n/**\n * Encapsulates common procedures to initialize graph.\n * @param {Object} props - Graph component props, object that holds data, id and config.\n * @param {Object} props.data - Data object holds links (array of **Link**) and nodes (array of **Node**).\n * @param {string} props.id - the graph id.\n * @param {Object} props.config - same as {@link #buildGraph|config in buildGraph}.\n * @param {Object} state - Graph component current state (same format as returned object on this function).\n * @returns {Object} a fully (re)initialized graph state object.\n * @memberof Graph/helper\n */\nfunction initializeGraphState({ data, id, config }, state) {\n    let graph;\n\n    _validateGraphData(data);\n\n    const nodesInputSnapshot = data.nodes.map(n => Object.assign({}, n));\n    const linksInputSnapshot = data.links.map(l => Object.assign({}, l));\n\n    if (state && state.nodes && state.links) {\n        // absorb existent positioning\n        graph = {\n            nodes: data.nodes.map(\n                n =>\n                    state.nodes[n.id]\n                        ? Object.assign({}, n, utils.pick(state.nodes[n.id], NODE_PROPS_WHITELIST))\n                        : Object.assign({}, n)\n            ),\n            links: {}\n        };\n    } else {\n        graph = {\n            nodes: data.nodes.map(n => Object.assign({}, n)),\n            links: {}\n        };\n    }\n\n    graph.links = data.links.map(l => Object.assign({}, l));\n\n    let newConfig = Object.assign({}, utils.merge(DEFAULT_CONFIG, config || {}));\n    let nodes = _initializeNodes(graph.nodes);\n    let links = _initializeLinks(graph.links); // matrix of graph connections\n    const { nodes: d3Nodes, links: d3Links } = graph;\n    const formatedId = id.replace(/ /g, '_');\n    const simulation = _createForceSimulation(newConfig.width, newConfig.height);\n\n    return {\n        id: formatedId,\n        config: newConfig,\n        links,\n        d3Links,\n        linksInputSnapshot,\n        nodes,\n        d3Nodes,\n        nodesInputSnapshot,\n        highlightedNode: '',\n        simulation,\n        newGraphElements: false,\n        configUpdated: false,\n        transform: 1\n    };\n}\n\n/**\n * This function updates the highlighted value for a given node and also updates highlight props.\n * @param {Object.<string, Object>} nodes - an object containing all nodes mapped by their id.\n * @param {Object.<string, Object>} links - an object containing a matrix of connections of the graph.\n * @param {Object} config - an object containing rd3g consumer defined configurations {@link #config config} for the graph.\n * @param {string} id - identifier of node to update.\n * @param {string} value - new highlight value for given node.\n * @returns {Object} returns an object containing the updated nodes\n * and the id of the highlighted node.\n * @memberof Graph/helper\n */\nfunction updateNodeHighlightedValue(nodes, links, config, id, value = false) {\n    const highlightedNode = value ? id : '';\n    const node = Object.assign({}, nodes[id], { highlighted: value });\n    let updatedNodes = Object.assign({}, nodes, { [id]: node });\n\n    // when highlightDegree is 0 we want only to highlight selected node\n    if (links[id] && config.highlightDegree !== 0) {\n        updatedNodes = Object.keys(links[id]).reduce((acc, linkId) => {\n            const updatedNode = Object.assign({}, updatedNodes[linkId], { highlighted: value });\n\n            return Object.assign(acc, { [linkId]: updatedNode });\n        }, updatedNodes);\n    }\n\n    return {\n        nodes: updatedNodes,\n        highlightedNode\n    };\n}\n\nexport { buildLinkProps, buildNodeProps, messageProps, initializeGraphState, updateNodeHighlightedValue };\n","/**\n * @module Graph/renderer\n * @description\n * Offers a series of methods that isolate render logic for Graph component.\n */\nimport React from 'react';\n\nimport CONST from './graph.const';\n\nimport Link from '../link/Link';\nimport Node from '../node/Node';\nimport { buildLinkProps, buildNodeProps, messageProps } from './graph.helper';\n\n/**\n * Build Link components given a list of links.\n * @param  {Object.<string, Object>} nodes - same as {@link #buildGraph|nodes in buildGraph}.\n * @param  {Array.<Object>} links - array of links {@link #Link|Link}.\n * @param  {Array.<Object>} linksMatrix - array of links {@link #Link|Link}.\n * @param  {Object} config - same as {@link #buildGraph|config in buildGraph}.\n * @param  {Function[]} linkCallbacks - same as {@link #buildGraph|linkCallbacks in buildGraph}.\n * @param  {string} highlightedNode - same as {@link #buildGraph|highlightedNode in buildGraph}.\n * @param  {Object} highlightedLink - same as {@link #buildGraph|highlightedLink in buildGraph}.\n * @param  {number} transform - value that indicates the amount of zoom transformation.\n * @returns {Object[]} returns the generated array of Link components.\n * @memberof Graph/helper\n */\nfunction _buildLinks(nodes, links, linksMatrix, config, linkCallbacks, highlightedNode, highlightedLink, transform) {\n    return links.map(link => {\n        const { source, target } = link;\n        // FIXME: solve this source data inconsistency later\n        const sourceId = source.id || source;\n        const targetId = target.id || target;\n        const key = `${sourceId}${CONST.COORDS_SEPARATOR}${targetId}`;\n        const props = buildLinkProps(\n            { ...link, source: `${sourceId}`, target: `${targetId}` },\n            nodes,\n            linksMatrix,\n            config,\n            linkCallbacks,\n            `${highlightedNode}`,\n            highlightedLink,\n            transform\n        );\n\n        return <Link key={key} {...props} />;\n    });\n}\n\n/**\n * Function that builds Node components.\n * @param  {Object.<string, Object>} nodes - an object containing all nodes mapped by their id.\n * @param  {Function[]} nodeCallbacks - array of callbacks for used defined event handler for node interactions.\n * @param  {Object} config - an object containing rd3g consumer defined configurations {@link #config config} for the graph.\n * @param  {string} highlightedNode - this value contains a string that represents the some currently highlighted node.\n * @param  {Object} highlightedLink - this object contains a source and target property for a link that is highlighted at some point in time.\n * @param  {string} highlightedLink.source - id of source node for highlighted link.\n * @param  {string} highlightedLink.target - id of target node for highlighted link.\n * @param  {number} transform - value that indicates the amount of zoom transformation.\n * @returns {Object} returns the generated array of nodes components\n * @memberof Graph/helper\n */\n\n// var EthCrypto = require('eth-crypto')\n\n// function getHash(thing) {\n//   return EthCrypto.hash.keccak256(JSON.stringify(thing))\n// }\n\nfunction _buildNodes(nodes, nodeCallbacks, config, highlightedNode, highlightedLink, transform, nodeState, time) {\n    return Object.keys(nodes).map(nodeId => {\n        let props;\n\n        if (nodes[nodeId].isMessage){\n            props = messageProps(\n                Object.assign({}, nodes[nodeId], { id: `${nodeId}` }),\n                config,\n                {},\n                highlightedNode,\n                highlightedLink,\n                transform\n            );\n            const color = nodes[nodeId].sig.substring(2,8)\n            props.fill = '#' + color\n            if (nodes[nodeId].isDoubleSpend){\n                props.size = 18\n                props.stroke = '#ff0000'\n                props.strokeWidth = 1\n            }\n        } else {\n            props = buildNodeProps(\n                Object.assign({}, nodes[nodeId], { id: `${nodeId}` }),\n                config,\n                nodeCallbacks,\n                highlightedNode,\n                highlightedLink,\n                transform\n            );\n            if (nodeState) {\n                let node = nodeState(nodeId, Math.floor(time))\n                props.fill = node.color\n            //     if (node) {\n            //         let state = node.state\n            //         if (state) {\n            //             let stateHash = getHash(state)\n            //             let color = stateHash.substr(-6)\n            //             //console.log(color)\n            //             props.fill = '#' + color\n            //         }\n            //     }\n            }\n        }\n\n        return <Node key={nodeId} {...props} />;\n    });\n}\n\n/**\n * Method that actually is exported an consumed by Graph component in order to build all Nodes and Link\n * components.\n * @param  {Object.<string, Object>} nodes - an object containing all nodes mapped by their id.\n * @param  {Function[]} nodeCallbacks - array of callbacks for used defined event handler for node interactions.\n * @param  {Array.<Object>} links - array of links {@link #Link|Link}.\n * @param  {Object.<string, Object>} linksMatrix - an object containing a matrix of connections of the graph, for each nodeId,\n * there is an Object that maps adjacent nodes ids (string) and their values (number).\n * ```javascript\n *  // links example\n *  {\n *     \"Androsynth\": {\n *         \"Chenjesu\": 1,\n *         \"Ilwrath\": 1,\n *         \"Mycon\": 1,\n *         \"Spathi\": 1,\n *         \"Umgah\": 1,\n *         \"VUX\": 1,\n *         \"Guardian\": 1\n *     },\n *     \"Chenjesu\": {\n *         \"Androsynth\": 1,\n *         \"Mycon\": 1,\n *         \"Spathi\": 1,\n *         \"Umgah\": 1,\n *         \"VUX\": 1,\n *         \"Broodhmome\": 1\n *     },\n *     ...\n *  }\n * ```\n * @param  {Function[]} linkCallbacks - array of callbacks for used defined event handler for link interactions.\n * @param  {Object} config - an object containing rd3g consumer defined configurations {@link #config config} for the graph.\n * @param  {string} highlightedNode - this value contains a string that represents the some currently highlighted node.\n * @param  {Object} highlightedLink - this object contains a source and target property for a link that is highlighted at some point in time.\n * @param  {string} highlightedLink.source - id of source node for highlighted link.\n * @param  {string} highlightedLink.target - id of target node for highlighted link.\n * @param  {number} transform - value that indicates the amount of zoom transformation.\n * @returns {Object} returns an object containing the generated nodes and links that form the graph. The result is\n * returned in a way that can be consumed by es6 **destructuring assignment**.\n * @memberof Graph/helper\n */\nfunction buildGraph(\n    nodes,\n    nodeCallbacks,\n    links,\n    linksMatrix,\n    linkCallbacks,\n    config,\n    highlightedNode,\n    highlightedLink,\n    transform,\n    nodeState,\n    time\n) {\n    return {\n        nodes: _buildNodes(nodes, nodeCallbacks, config, highlightedNode, highlightedLink, transform, nodeState, time),\n        links: _buildLinks(\n            nodes,\n            links,\n            linksMatrix,\n            config,\n            linkCallbacks,\n            highlightedNode,\n            highlightedLink,\n            transform\n        )\n    };\n}\n\nexport { buildGraph };\n","import React, { Component } from 'react';\n\n\n // <button id = \"showState\" onClick={()=> {\n //            showState()\n //            hide()\n //          }}>\n //            {visibleState() ? 'Hide State' : 'Show State'}\n //  </button>\n\nclass NodeControls extends Component {\n  render() {\n    const {doubleSpend, spend, hide, visibleState} = this.props\n    return (\n        <div id = \"NodeControls\">\n          <button id = \"doubleSpend\" onClick={()=> {\n            doubleSpend()\n            hide()\n          }}>\n            Double Spend\n          </button>\n          <button id = \"spend\" onClick={()=> {\n            spend()\n            hide()\n          }}>\n            Spend\n          </button>\n        </div>\n    );\n  }\n}\n\nexport default NodeControls;\n","import React from 'react';\nimport { drag as d3Drag } from 'd3-drag';\nimport { forceLink as d3ForceLink } from 'd3-force';\nimport { select as d3Select, selectAll as d3SelectAll, event as d3Event } from 'd3-selection';\nimport { zoom as d3Zoom } from 'd3-zoom';\n\nimport CONST from './graph.const';\nimport DEFAULT_CONFIG from './graph.config';\nimport ERRORS from '../../err';\n\nimport * as graphRenderer from './graph.renderer';\nimport * as graphHelper from './graph.helper';\nimport utils from '../../utils';\n\nimport Node from '../node/Node.jsx';\nimport NodeControls from '../NodeControls'\n\n// Some d3 constant values\nconst D3_CONST = {\n    FORCE_LINK_STRENGTH: 1,\n    LINK_IDEAL_DISTANCE: 100,\n    SIMULATION_ALPHA_TARGET: 0.05\n};\n\n// View animation/state loop constant values\nconst VIEW_TIME_INCREMENT = 0.1\n\n// Suppress some drag events\nlet d2;\n\nfunction getKeyByValue(object, value) {\n  return Object.keys(object).find(key => object[key] === value);\n}\n\nexport default class Graph extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        if (!this.props.id) {\n            utils.throwErr(this.constructor.name, ERRORS.GRAPH_NO_ID_PROP);\n        }\n\n        this.state = graphHelper.initializeGraphState(this.props, this.state);\n        this.state.time = 0;\n        this.state.paused = false;\n    }\n\n    componentWillReceiveProps(nextProps) {\n        // console.log('got new messages:', nextProps.messages, nextProps.time)\n\n        //don't touch\n        const newGraphElements =\n            nextProps.data.nodes.length !== this.state.nodesInputSnapshot.length ||\n            nextProps.data.links.length !== this.state.linksInputSnapshot.length ||\n            !utils.isDeepEqual(nextProps.data, {\n                nodes: this.state.nodesInputSnapshot,\n                links: this.state.linksInputSnapshot\n            });\n        const configUpdated =\n            !utils.isObjectEmpty(nextProps.config) && !utils.isDeepEqual(nextProps.config, this.state.config);\n        const state = newGraphElements ? graphHelper.initializeGraphState(nextProps, this.state) : this.state;\n        const config = configUpdated ? utils.merge(DEFAULT_CONFIG, nextProps.config || {}) : this.state.config;\n\n        // in order to properly update graph data we need to pause eventual d3 ongoing animations\n        newGraphElements && this.pauseSimulation();\n\n        const transform = nextProps.config.panAndZoom !== this.state.config.panAndZoom ? 1 : this.state.transform;\n\n        this.setState({\n            ...state,\n            config,\n            newGraphElements,\n            configUpdated,\n            transform\n        });\n\n        if (nextProps.messages) {\n            this.setState({messages: nextProps.messages})\n        }\n        if (nextProps.speed) this.setState({speed: nextProps.speed})\n        if (nextProps.nodeState) this.setState({nodeState : nextProps.nodeState})\n\n        const wasPaused = this.state.paused\n\n        this.setState({paused: nextProps.paused}, function() {\n            if (wasPaused && !nextProps.paused) {\n                this.tick()\n            }\n        });\n    }\n\n    onClickNode(nodeID) {\n\n        if (this.state.clickedNode && this.state.clickedNode.id === nodeID) {\n            this.setState({clickedNode: null})\n        } else {\n            const clickedNode = this.state.nodes[nodeID]\n            this.setState({clickedNode: clickedNode})\n        }\n    }\n\n    componentDidUpdate() {\n        // if the property staticGraph was activated we want to stop possible ongoing simulation\n        this.state.config.staticGraph && this.pauseSimulation();\n\n        if (!this.state.config.staticGraph && this.state.newGraphElements) {\n            this._graphForcesConfig();\n            this.restartSimulation();\n            this.setState({ newGraphElements: false });\n        }\n\n        if (this.state.configUpdated) {\n            this._zoomConfig();\n            this.setState({ configUpdated: false });\n        }\n    }\n\n    componentDidMount() {\n        if (!this.state.config.staticGraph) {\n            this._graphForcesConfig();\n        }\n        // graph zoom and drag&drop all network\n        this._zoomConfig();\n        this.tick = this.tick.bind(this)\n        this.animate = this.animate.bind(this)\n        this.getTick = this.props.onTick\n        this.start()\n    }\n\n    componentWillUnmount() {\n        this.pauseSimulation();\n    }\n\n    start() {\n        this.tick()\n        this.getTick(0)\n    }\n\n    tick() {\n        if (!this.state.paused) {\n            const prevTime = this.state.time\n            // console.log(prevTime)\n            const newTime = this.state.time + VIEW_TIME_INCREMENT;\n            this.animate()\n            if ((Math.floor(newTime) - Math.floor(prevTime)) === 1) {\n                // console.log(\"TICK\", prevTime)\n                // const messages = this.state.messages\n                // var nodesDictionary = this.state.nodes\n                // for (var i = 0; i < messages.length; i++) {\n                //     // const key = getKeyByValue(nodesDictionary, messages[i].node)\n                //     delete nodesDictionary[messages[i].key]\n                // }\n                this.getTick(Math.floor(newTime))\n            }\n            this.animate()\n            this.setState({time : newTime})\n\n            // setTimeout(this.tick, 1);\n            requestAnimationFrame(this.tick);\n        } else {\n        console.log(\"paused!\")\n        }\n    }\n\n    step(time) {\n        const messages = this.state.messages\n        var nodesDictionary = this.state.nodes\n\n        console.log(nodesDictionary)\n\n        for(var i = 0; i < messages.length; i++) {\n            const key = getKeyByValue(nodesDictionary, messages[i].node)\n            console.log(\"to delete:\", key)\n            delete nodesDictionary[key]\n        }\n\n        console.log(nodesDictionary)\n\n\n        this.animate()\n        this.setState({time : time},\n            function() {\n                console.log(\"SET TIME TO\", this.state.time)\n                this.getTick(time)\n                this.animate()\n            })\n    }\n\n    animate() {\n        const messages = this.state.messages\n        // console.log('state messages', this.state.messages)\n\n        if (messages) {\n            for(var i = 0; i < messages.length; i++) {\n                var nodesDictionary = this.state.nodes\n\n                if (!messages[i].key) {\n                    messages[i].key = messages[i].message.sig + messages[i].sender + messages[i].recipient.pid + messages[i].rcvTime\n\n                    if (!messages[i].node) {\n                        if (!nodesDictionary[messages[i].key]) {\n                            let newTxNode = new Node()\n                            // console.log(\"newNode\", messages[i].node)\n                            // console.log(\"added node to msg!\")\n                            newTxNode.isMessage = true\n                            newTxNode.isDoubleSpend = messages[i].message.isDoubleSpend\n                            newTxNode.sig = messages[i].message.sig\n\n                            messages[i].node = newTxNode\n                            nodesDictionary[messages[i].key] = newTxNode\n                        } else {\n                            messages[i].node = nodesDictionary[messages[i].key]\n                        }\n                    }\n                }\n                // console.log(msg.node)\n                var node = messages[i].node\n                const progress = (this.state.time - messages[i].sentTime)/(messages[i].recvTime - messages[i].sentTime)\n\n                if (progress <= 1 && progress >= 0) {\n                    const sender = nodesDictionary[messages[i].sender]\n                    const recipient = nodesDictionary[messages[i].recipient.pid]\n\n                    // console.log(\"sender\", sender)\n                    // console.log(\"recipe\", recipient)\n\n                    // console.log(\"senderX\", sender.y)\n                    // console.log(\"recipeX\", recipient.y)\n\n                    node.x = sender.x\n                    node.y = sender.y\n\n                    node.x = recipient.x\n                    node.y = recipient.y\n\n                    // node['fx'] = node.x;\n                    // node['fy'] = node.y;\n\n                    node.x = progress * (recipient.x - sender.x) + sender.x\n                    node.y = progress * (recipient.y - sender.y) + sender.y\n                } else if (progress > 1) {\n                    delete nodesDictionary[messages[i].key]\n                    messages.splice(i, 1)\n                }\n            }\n            this.setState( { messages : messages } )\n        }\n    }\n    render() {\n        const {doubleSpend, spend, deselectNode, clickedNode, visibleState} = this.props\n        const { nodes, links } = graphRenderer.buildGraph(\n            this.state.nodes,\n            {\n                onClickNode: this.props.onClickNode, //this.onClickNode.bind(this),\n                onMouseOverNode: this.onMouseOverNode,\n                onMouseOut: this.onMouseOutNode,\n            },\n            this.state.d3Links,\n            this.state.links,\n            {\n                onClickLink: this.props.onClickLink,\n                onMouseOverLink: this.onMouseOverLink,\n                onMouseOutLink: this.onMouseOutLink\n            },\n            this.state.config,\n            this.state.highlightedNode,\n            this.state.highlightedLink,\n            this.state.transform,\n            this.state.nodeState,\n            this.state.time\n        );\n\n        let nodeControls = ''\n\n        if(clickedNode) {\n            nodeControls = (\n            <foreignObject x={this.state.nodes[clickedNode.pid].x} y={this.state.nodes[clickedNode.pid].y}>\n              <NodeControls\n                doubleSpend={()=>doubleSpend(clickedNode)}\n                spend={()=>spend(clickedNode)}\n                hide = {deselectNode}\n                visibleState = {()=>visibleState(clickedNode)}/>\n            </foreignObject>)\n        }\n\n        const svgStyle = {\n            maxHeight: \"100%\",\n            maxWidth: \"100%\",\n            viewBox: \"0 0 1000 1000\",\n            preserveAspectRatio: \"xMaxYMax\"\n        };\n\n        return (\n            <div id={`${this.state.id}-${CONST.GRAPH_WRAPPER_ID}`}>\n                <svg style={svgStyle}>\n                    <g id={`${this.state.id}-${CONST.GRAPH_CONTAINER_ID}`}>\n                        {links}\n                        {nodes}\n                        {nodeControls}\n                    </g>\n                </svg>\n\n            </div>\n        );\n    }\n\n    /**\n     * Sets d3 tick function and configures other d3 stuff such as forces and drag events.\n     * @returns {undefined}\n     */\n    _graphForcesConfig() {\n        this.state.simulation.nodes(this.state.d3Nodes).on('tick', this._tick);\n\n        const forceLink = d3ForceLink(this.state.d3Links)\n            .id(l => l.id)\n            .distance(D3_CONST.LINK_IDEAL_DISTANCE)\n            .strength(D3_CONST.FORCE_LINK_STRENGTH);\n\n        this.state.simulation.force(CONST.LINK_CLASS_NAME, forceLink);\n\n        const customNodeDrag = d3Drag()\n            .on('start', this._onDragStart)\n            .on('drag', this._onDragMove)\n            .on('end', this._onDragEnd);\n\n        d3Select(`#${this.state.id}-${CONST.GRAPH_WRAPPER_ID}`)\n            .selectAll('.node')\n            .call(customNodeDrag);\n    }\n\n    /**\n     * Handles d3 drag 'end' event.\n     * @returns {undefined}\n     */\n    _onDragEnd = () => {\n        !this.state.config.staticGraph &&\n        this.state.config.automaticRearrangeAfterDropNode &&\n        this.state.simulation.alphaTarget(D3_CONST.SIMULATION_ALPHA_TARGET).restart();\n\n        if (d2 < 10) {\n            d3Select(window).on('click.drag', null);\n        }\n    }\n\n    /**\n     * Handles d3 'drag' event.\n     * {@link https://github.com/d3/d3-drag/blob/master/README.md#drag_subject|more about d3 drag}\n     * @param  {Object} ev - if not undefined it will contain event data.\n     * @param  {number} index - index of the node that is being dragged.\n     * @param  {Array.<Object>} nodeList - array of d3 nodes. This list of nodes is provided by d3, each\n     * node contains all information that was previously fed by rd3g.\n     * @returns {undefined}\n     */\n    _onDragMove = (ev, index, nodeList) => {\n        const id = nodeList[index].id;\n\n        if (!this.state.config.staticGraph) {\n            // this is where d3 and react bind\n            let draggedNode = this.state.nodes[id];\n\n            draggedNode.x += d3Event.dx;\n            draggedNode.y += d3Event.dy;\n\n            // set nodes fixing coords fx and fy\n            draggedNode['fx'] = draggedNode.x;\n            draggedNode['fy'] = draggedNode.y;\n\n            this._tick();\n            this.animate();\n        }\n\n         d2 += d3Event.dx * d3Event.dx + d3Event.dy * d3Event.dy;\n    };\n\n    /**\n     * Handles d3 drag 'start' event.\n     * @returns {undefined}\n     */\n    _onDragStart = () => {\n        this.pauseSimulation();\n         d2 = 0;\n    }\n\n    /**\n     * Sets nodes and links highlighted value.\n     * @param  {string} id - the id of the node to highlight.\n     * @param  {boolean} [value=false] - the highlight value to be set (true or false).\n     * @returns {undefined}\n     */\n    _setNodeHighlightedValue = (id, value = false) =>\n        this._tick(\n            graphHelper.updateNodeHighlightedValue(this.state.nodes, this.state.links, this.state.config, id, value)\n        );\n\n    /**\n     * The tick function simply calls React set state in order to update component and render nodes\n     * along time as d3 calculates new node positioning.\n     * @param {Object} state - new state to pass on.\n     * @returns {undefined}\n     */\n    _tick = (state = {}) => this.setState(state);\n\n    /**\n     * Configures zoom upon graph with default or user provided values.<br/>\n     * {@link https://github.com/d3/d3-zoom#zoom}\n     * @returns {undefined}\n     */\n    _zoomConfig = () =>\n        d3Select(`#${this.state.id}-${CONST.GRAPH_WRAPPER_ID}`).call(\n            d3Zoom()\n                .scaleExtent([this.state.config.minZoom, this.state.config.maxZoom])\n                .on('zoom', this._zoomed)\n        );\n\n    /**\n     * Handler for 'zoom' event within zoom config.\n     * @returns {Object} returns the transformed elements within the svg graph area.\n     */\n    _zoomed = () => {\n        const transform = d3Event.transform;\n\n        d3SelectAll(`#${this.state.id}-${CONST.GRAPH_CONTAINER_ID}`).attr('transform', transform);\n\n        this.state.config.panAndZoom && this.setState({ transform: transform.k });\n    };\n\n    /**\n     * Handles mouse over node event.\n     * @param  {string} id - id of the node that participates in the event.\n     * @returns {undefined}\n     */\n    onMouseOverNode = id => {\n        // this.props.onMouseOverNode && this.props.onMouseOverNode(id);\n\n        // this.state.config.nodeHighlightBehavior && this._setNodeHighlightedValue(id, true);\n    };\n\n    /**\n     * Handles mouse out node event.\n     * @param  {string} id - id of the node that participates in the event.\n     * @returns {undefined}\n     */\n    onMouseOutNode = id => {\n        this.props.onMouseOutNode && this.props.onMouseOutNode(id);\n\n        this.state.config.nodeHighlightBehavior && this._setNodeHighlightedValue(id, false);\n    };\n\n    /**\n     * Handles mouse over link event.\n     * @param  {string} source - id of the source node that participates in the event.\n     * @param  {string} target - id of the target node that participates in the event.\n     * @returns {undefined}\n     */\n    onMouseOverLink = (source, target) => {\n        this.props.onMouseOverLink && this.props.onMouseOverLink(source, target);\n\n        if (this.state.config.linkHighlightBehavior) {\n            this.setState({highlightedLink : { source, target }});\n            this._tick();\n        }\n    };\n\n    /**\n     * Handles mouse out link event.\n     * @param  {string} source - id of the source node that participates in the event.\n     * @param  {string} target - id of the target node that participates in the event.\n     * @returns {undefined}\n     */\n    onMouseOutLink = (source, target) => {\n        this.props.onMouseOutLink && this.props.onMouseOutLink(source, target);\n\n        if (this.state.config.linkHighlightBehavior) {\n            this.setState({highlightedLink: undefined});\n            this._tick();\n        }\n    };\n\n    /**\n     * Calls d3 simulation.stop().<br/>\n     * {@link https://github.com/d3/d3-force#simulation_stop}\n     * @returns {undefined}\n     */\n    pauseSimulation = () => this.state.simulation.stop();\n\n    /**\n     * This method resets all nodes fixed positions by deleting the properties fx (fixed x)\n     * and fy (fixed y). Following this, a simulation is triggered in order to force nodes to go back\n     * to their original positions (or at least new positions according to the d3 force parameters).\n     * @returns {undefined}\n     */\n    resetNodesPositions = () => {\n        if (!this.state.config.staticGraph) {\n            for (let nodeId in this.state.nodes) {\n                let node = this.state.nodes[nodeId];\n                if (node.fx && node.fy) {\n                    Reflect.deleteProperty(node, 'fx');\n                    Reflect.deleteProperty(node, 'fy');\n                }\n            }\n\n            this.state.simulation.alphaTarget(D3_CONST.SIMULATION_ALPHA_TARGET).restart();\n\n            this._tick();\n        }\n    };\n\n    /**\n     * Calls d3 simulation.restart().<br/>\n     * {@link https://github.com/d3/d3-force#simulation_restart}\n     * @returns {undefined}\n     */\n    restartSimulation = () => !this.state.config.staticGraph && this.state.simulation.restart();\n}\n","import React, { Component } from 'react';\nimport { Button, Glyphicon, Well} from 'react-bootstrap';\nimport Switch from 'rc-switch';\n\n\nclass Controls extends Component {\n  render() {\n    const {paused, onPause, onPauseTxs, pausedTxs, togglePopup} = this.props\n\n    return (\n        <div id = \"Controls\">\n          <Button onClick={onPause}>{paused ?\n            <Glyphicon glyph=\"play\" />\n           : <Glyphicon glyph=\"pause\" />}</Button>\n          <div id=\"txToggle\">\n          Send Transactions <Switch\n             onChange={onPauseTxs}\n           />\n           </div>\n          <Button onClick={togglePopup}>\n            <Glyphicon glyph=\"question-sign\" />\n          </Button>\n        </div>\n    );\n  }\n}\n\nexport default Controls;\n","import React, { Component } from 'react';\nimport _ from 'lodash'\n\nclass Ledger extends Component {\n  constructor(props) {\n    super(props)\n    this.invalidNonceTxs = []\n  }\n\n  updateInvalidNonceTxs() {\n    const {invalidNonceTxs} = this\n    const {node} = this.props\n    const newTxs = []\n    const updatedInvalidNonceTxs = []\n\n    Object.keys(node.invalidNonceTxs).forEach(function(address, i) {\n      Object.keys(node.invalidNonceTxs[address]).forEach(function(nonce, i) {\n        const tx = node.invalidNonceTxs[address][nonce]\n        newTxs.push(tx.contents)\n      })\n    })\n    //add Old txs into updatedInvalidNonceTxs if it's in the array of new txs\n    for (let tx of invalidNonceTxs) {\n      const hasOldTx = newTxs.find(newTx => _.isEqual(newTx, tx))\n      if (hasOldTx) {\n        updatedInvalidNonceTxs.push(tx)\n      }\n    }\n    //add all new txs into updatedInvalidNonceTxs\n    for(let newTx of newTxs) {\n      const hasNewTx = updatedInvalidNonceTxs.find(tx => _.isEqual(newTx, tx))\n      if (!hasNewTx) {\n        updatedInvalidNonceTxs.push(newTx)\n      }\n    }\n    this.invalidNonceTxs = updatedInvalidNonceTxs\n  }\n\n  clicked(showState, node) {\n    showState(node)\n  }\n\n  render() {\n    const {node, icons, showState} = this.props\n\n    this.updateInvalidNonceTxs()\n\n    const data = Object.keys(node.state).map(function(nodeId, i) {\n      return (\n        <tr key={i}>\n          <td>{nodeId.substring(0,5)}</td>\n          <td>{node.state[nodeId].balance}</td>\n          <td>{node.state[nodeId].nonce}</td>\n        </tr>\n      )\n    })\n\n    const nonceData = this.invalidNonceTxs.map(function(tx, i) {\n      return (\n        <tr key={i}>\n          <td>{tx.from.substring(0,5)}</td>\n          <td>{tx.to.substring(0,5)}</td>\n          <td>{tx.amount}</td>\n          <td>{tx.nonce}</td>\n        </tr>\n      )\n    })\n    const nonceTable =\n    <div style = {this.invalidNonceTxs.length ? {} : {display: 'none'}}>\n        <p>Invalid Nonce Transactions</p>\n       <table>\n         <tbody>\n          <tr>\n            <th>From</th>\n            <th>To</th>\n            <th>Amount</th>\n            <th>Nonce</th>\n          </tr>\n          { nonceData }\n         </tbody>\n        </table>\n        </div>\n\n    const backgroundColor = Number.parseInt(node.color.slice(1), 16)\n\n    const r = (backgroundColor >> 16) & 0xff\n    const g = (backgroundColor >> 8) & 0xff\n    const b = backgroundColor & 0xff\n\n    const brightness = (r * 0.299 + g * 0.587 + b * 0.114)/255\n\n    let textColor = \"white\"\n    if (brightness > 0.5) {\n      textColor = \"black\"\n    }\n\n    return (\n        <div className=\"Ledger\" id={\"ledger-\" + node.pid} style={{ backgroundColor: node.color, color: textColor }}>\n          <img alt=\"Gerbil\" src={icons[node.pid]} width=\"30\" />\n          <span className=\"ledger-title\">\n            {' ' + node.pid.substring(0,5)}\n          </span>\n          <button className=\"LedgerMinimizeButton\" onClick={(e) => this.clicked(showState, node)}>\n            <div className=\"LedgerMinimizeButtonIcon\" style={{ backgroundColor: textColor }}></div>\n          </button>\n          <table>\n           <tbody>\n            <tr>\n              <th>Address</th>\n              <th>Balance</th>\n              <th>Nonce</th>\n              <th>            </th>\n            </tr>\n            { data }\n           </tbody>\n          </table>\n          {nonceTable}\n        </div>\n    );\n  }\n}\n\nexport default Ledger;\n","import React, { Component } from 'react';\nimport Ledger from './Ledger.jsx'\n\n\nclass Ledgers extends Component {\n  render() {\n    const {nodes, icons, showState} = this.props\n\n    return (\n        <div id = \"Ledgers\">\n        {\n        \tObject.keys(nodes).map((pid, index) => (\n        \t\t<Ledger key={pid} node={nodes[pid]} icons={icons} showState={showState}/>\n        \t))\n        }\n        </div>\n    );\n  }\n}\n\nexport default Ledgers;\n","import React, { Component } from 'react';\nimport { Modal, Button, Popover, Tooltip, OverlayTrigger } from 'react-bootstrap';\n\nclass Instructions extends Component {\n  render() {\n    const {show, handleClose} = this.props\n\n    const colorPopover = (\n      <Popover id=\"modal-popover\" title=\"\">\n        For the technical people: We took the first 6 hexadecimal characters of the Keccak-256 hash of the state and turned it into a hex color!\n      </Popover>\n    );\n\n    const spendPopover = (\n      <Popover id=\"modal-popover\" title=\"Spend\">\n        Clicking \"Spend\" will make the selected node generate and propagate a transaction sending $10 to a random node.\n      </Popover>\n    );\n\n    const doubleSpendPopover = (\n      <Popover id=\"modal-popover\" title=\"Double Spend\">\n        Clicking \"Double Spend\" will make the selected node generate and selectively propagate two transactions each sending $10 to a different peer.\n        <br></br>\n       {/* Transaction 1 sending $10 to Peer 1 will be broadcasted directly to Peer 1, and Transaction 2 sending $10 to Peer 2 will be broadcasted directly to Peer 2.*/}\n      </Popover>\n    );\n\n    const transactionsPopover = (\n      <Popover id=\"modal-popover\" title=\"Resume Transactions\">\n        Switching on \"Resume Transactions\" will make all nodes randomly generate and send transactions.\n        <br></br>\n      </Popover>\n    );\n\n    return (\n      <Modal show={show} onHide={handleClose}>\n       <Modal.Header closeButton>\n         <Modal.Title>Instructions</Modal.Title>\n       </Modal.Header>\n       <Modal.Body>\n         <h4>What is this?</h4>\n         <p>\n          This is an interactive network simulation designed as a part of Chapter 2 of a course called {' '}\n             <a href=\"https://cryptoeconomics.study/\">Cryptoeconomics.study</a>.\n         </p>\n         <h4>How do you send a transaction?</h4>\n         <p>\n          Click on a node to either {' '}\n            <OverlayTrigger overlay={spendPopover}>\n              <a href=\"\">Spend</a>\n            </OverlayTrigger>\n          {' '} or {' '}\n            <OverlayTrigger overlay={doubleSpendPopover}>\n              <a href=\"\">Double Spend</a>\n            </OverlayTrigger>\n          {' '}. You can also toggle the {' '}\n            <OverlayTrigger overlay={transactionsPopover}>\n              <a href=\"\">Resume Transactions</a>\n            </OverlayTrigger>\n            {' '}switch.\n         </p>\n\n         <h4>What do the colors mean?</h4>\n         <p>\n          The color of each node {' '}\n              <OverlayTrigger overlay={colorPopover}>\n                <a href = \"\">represents</a>\n              </OverlayTrigger>{' '} the state of that node's ledger.\n         </p>\n         <hr />\n       </Modal.Body>\n       <Modal.Footer>\n         <Button onClick={handleClose}>Close</Button>\n       </Modal.Footer>\n     </Modal>\n    );\n  }\n}\n\nexport default Instructions;\n","import React, { Component } from 'react';\n\nclass TrayButton extends Component {\n  constructor(props) {\n    super(props)\n    this.clicked = this.clicked.bind(this)\n  }\n\n  clicked(showState, node) {\n    showState(node)\n  }\n\n  render() {\n    const {isSelected, icons, node, showState} = this.props\n\n    const styles = {\n      height: \"45px\",\n      width: \"45px\",\n      backgroundColor: node.color,\n      borderRadius: \"50%\",\n      display: isSelected ? \"none\" : \"flex\",\n      // visibility: isSelected ? \"hidden\" : \"visible\"\n    }\n\n    if (node) {\n      return (\n          <div onClick={(e) => this.clicked(showState, node)} className=\"TrayButton\" id={\"trayButton-\" + node.pid} style={styles}>\n            <img alt=\"Gerbil\" src={icons[node.pid]} width=\"25\" />\n         </div>\n      );\n    } else {\n      return (<div></div>);\n    }\n  }\n}\n\nexport default TrayButton;\n","import React, { Component } from 'react';\nimport TrayButton from './TrayButton.jsx'\n\nclass Tray extends Component {\n  render() {\n    const {nodes, selectedNodes, icons, showState} = this.props\n\n    return (\n        <div id=\"Tray\">\n        {\n          Object.keys(nodes).map((pid, index) => (\n        \t\t<TrayButton key={pid} isSelected={(nodes[pid].pid in selectedNodes)} icons={icons} node={nodes[pid]} showState={showState}/>\n          ))\n\t\t}\n        </div>\n    );\n  }\n}\n\nexport default Tray;\n","import React, { Component } from 'react';\nimport {Graph} from './react-d3-graph-custom/src/index';\nimport {nodes, network} from '../c2_NetworkDoubleSpends/createNetSim'\nimport Controls from './Controls.js'\nimport Ledgers from './Ledgers.jsx'\nimport Instructions from './Instructions.jsx'\nimport Tray from './Tray.jsx'\n// import Parameters from './Parameters.js'\nimport clone  from 'clone';\n\nconst ICONS = [\n  'https://i.imgur.com/Wi9yFXw.png',\n  'https://i.imgur.com/U5Y99Rm.png',\n  'https://i.imgur.com/NPH4rqg.png',\n  'https://i.imgur.com/MptO0GC.png',\n  'https://i.imgur.com/yHwPVBF.png',\n  'https://i.imgur.com/yvv1MMb.png',\n  'https://i.imgur.com/I4Dlkik.png',\n  'https://i.imgur.com/jNB8LS6.png'\n]\n\n// graph payload (with minimalist structure)\nconst data = {\n  nodes: [],\n  links: []\n}\n\nlet iconMap = {}\nfor (let i = 0; i < nodes.length; i++) {\n  // add peers\n  data.nodes.push({\n    id: nodes[i].pid,\n    name: nodes[i].pid.slice(0, 5),\n    gerbil: ICONS[i]\n  })\n  iconMap[nodes[i].pid] = ICONS[i]\n}\nfor (const node of nodes) {\n  // connect them\n  for (const peer of network.peers[node.pid]) {\n    data.links.push({\n      source: node.pid,\n      target: peer.pid\n    })\n  }\n}\n\n// the graph configuration, you only need to pass down properties\n// that you want to override, otherwise default ones will be used\nconst myConfig = {\n  automaticRearrangeAfterDropNode: true,\n  staticGraph: false,\n  nodeHighlightBehavior: true,\n  node: {\n      size: 400,\n      highlightStrokeColor: 'blue',\n      labelProperty: 'name'\n  },\n  link: {\n      highlightColor: 'lightblue'\n  }\n};\n\nconst onClickLink = function(source, target) {\n     window.alert(`Clicked link between ${source} and ${target}`);\n};\n\nconst onMouseOverLink = function(source, target) {\n     // window.alert(`Mouse over in link between ${source} and ${target}`);\n};\n\nconst onMouseOutLink = function(source, target) {\n     // window.alert(`Mouse out link between ${source} and ${target}`);\n};\n\nclass Network extends Component {\n  constructor() {\n    super()\n    this.state = {clickedNode: null, selectedNodes:{}, history: [], paused: false, pausedTxs: true, speed: 10}\n  }\n\n  componentDidMount() {\n    for (let node of nodes) {\n      this.showState(node)\n    }\n  }\n\n  setMessageQueue(network){\n    let oldQ = network.messageQueue\n    var newQ = []\n    Object.keys(oldQ).forEach(function(key,index) {\n      for (let message of oldQ[key]) {\n        newQ.push({...message, rcvTime: key})\n      }\n    });\n    return newQ\n  }\n\n  tick() {\n    network.tick()\n    const history = this.state.history\n    history.push(clone(network)) // push a deep clone of the network object\n    this.setState({history: history})\n  }\n\n  //sets Messages\n  getTick(time) {\n    const {history, selectedNodes, clickedNode} = this.state\n    if(time > history.length) {\n      throw new Error('You skipped a time step!')\n    } else if (time === history.length ) {\n      this.tick()\n    }\n    let messages = this.setMessageQueue(history[time])\n    // Update states if agent already clicked\n    if (clickedNode){\n      const node = this.getNode(clickedNode.pid, time)\n      this.setState({clickedNode: node})\n    }\n\n    for (var nodeId in selectedNodes) {\n      selectedNodes[nodeId] = this.getNode(nodeId, time)\n    }\n\n    this.setState({selectedNodes: selectedNodes, messages: messages, time: time})\n  }\n\n  getNode (nodeId, time) {\n    const currNetwork = this.state.history[time]\n    if (currNetwork) {\n      return currNetwork.agents.find((node) => {\n        return node.pid === nodeId;\n      });\n    }\n  }\n\n  getCurrNode(nodeId) {\n    if (network) {\n      return network.agents.find((node) => {\n        return node.pid === nodeId;\n      });\n    }\n  }\n\n  onClickNode (nodeId) {\n    const {clickedNode, time} = this.state\n    const node = this.getNode(nodeId, time)\n    // console.log('Clicked node', node.state, node.invalidNonceTxs)\n\n    if (clickedNode && node.pid === clickedNode.pid) {\n      this.setState({clickedNode: null})\n    } else {\n      this.setState({clickedNode: node})\n    }\n  };\n\n  onMouseOverNode (nodeId) {\n    // const node = getNode(nodeId)\n    // this.setState({clickedNode: node})\n    // if not clicked, highlight node in green\n  };\n\n  onMouseOutNode (nodeId) {\n    // if(!this.state.isNodeClicked) this.setState({clickedNode: this.state.prevNode})\n    // if not clicked, change nodes color back to normal\n  }\n\n  pause(){\n    this.setState({ paused: !this.state.paused })\n    //this.state.speed = 1    //(reset FF/Rewind)\n  }\n  pauseTxs(){\n    this.setState({ pausedTxs: !this.state.pausedTxs })\n    for(let node of nodes) {\n      node.pausedSpending = !node.pausedSpending\n    }\n  }\n\n  rewind(){\n    let speed = this.state.speed\n    if(speed*1.5 > 10){\n      return\n    }\n    this.setState({speed : speed *= 1.5})\n    console.log('rewind', speed)\n  }\n\n  fastforward(){\n    let speed = this.state.speed\n    if(speed/1.5 < .005){\n      return\n    }\n    this.setState({speed : speed /= 1.5})\n    console.log('fastforward', speed)\n  }\n\n  stepbackward(){\n    console.log('stepbackward')\n    const {time} = this.state\n    if(time < 1){\n      return\n    }\n    this.setState({paused:true})\n    this.graph.step(time - 1)\n    this.getTick(time - 1)\n    this.graph.animate()\n    //this.graph.setState({messages: this.setMessageQueue(this.history[time])})\n  }\n\n  stepforward(){\n    console.log('stepforward')\n    const {time} = this.state\n    this.setState({paused:true})\n    this.graph.step(time + 1)\n    this.getTick(time + 1)\n    this.graph.animate()\n  }\n\n  doubleSpend(evilNode){\n    const drEvil = evilNode.pid\n    const victims = [network.peers[drEvil][0], network.peers[drEvil][1]]\n    const spends = [evilNode.generateTx(victims[0].wallet.address, 10), evilNode.generateTx(victims[1].wallet.address, 10)]\n    spends[0].isDoubleSpend = true\n    spends[1].isDoubleSpend = true\n    network.broadcastTo(drEvil, victims[0], spends[0])\n    network.broadcastTo(drEvil, victims[1], spends[1])\n\n    console.log(\"Double spender:\", drEvil, \"victims:\", victims, \"spends:\", spends)\n  }\n\n  spend(currNode){\n    const node = this.getCurrNode(currNode.pid)\n    const tx = node.generateTx(node.getRandomReceiver(), 10)\n    node.transactions.push(tx)\n    node.applyTransaction(tx)\n    // Broadcast this tx to the network\n    network.broadcast(node.pid, tx)\n\n    // initiate random spend\n  }\n\n  showState(node){\n    // create popup with state\n    const {selectedNodes} = this.state\n    if (selectedNodes[node.pid]) {\n      delete selectedNodes[node.pid]\n    } else {\n      selectedNodes[node.pid] = node\n    }\n    this.setState({selectedNodes: selectedNodes})\n  }\n\n  togglePopup() {\n    this.setState({\n      showPopup: !this.state.showPopup\n    });\n  }\n\n  visibleState(node){\n    return !!this.state.selectedNodes[node.pid]\n  }\n\n  deselectNode(){\n    this.setState({clickedNode: null})\n  }\n\n  reset(){\n    console.log('reset')\n    this.getTick(0)\n  }\n  setSpeed(value){\n    let speed = value/1000.0\n    this.setState({speed : speed})\n    console.log(\"speeedooo\", speed)\n\n  }\n  setLatency(event){\n    let raw = event.target.value\n    let scaled = Math.min(Math.max(parseInt(raw), 1), 10)\n    console.log(\"latency\", raw, scaled)\n\n  }\n  setPacketLoss(event){\n    let raw = event.target.value\n    let scaled = Math.min(Math.max(parseInt(raw), 1), 20)\n    console.log(\"packetloss\", raw, scaled)\n\n  }\n  render() {\n    const {clickedNode, selectedNodes, messages, time, paused, pausedTxs, speed} = this.state\n    return (\n      <div id=\"App-container\">\n        <div id=\"Text-container\">\n          <div id=\"Overflow-top\"></div>\n          <h3>2.2: The Double Spend</h3><div id=\"Text\">Building a centralized payments processor like Paypal is simple, but relies on trust that Paypal will not break the rules. A simple way to decentralize PayPal is to make clients download all transactions and run the PayPal code to generate their belief of the current state. {/* In this section we see why this is not enough, how to mentally model a network & synchrony assumptions.<br/><br/>\n\n  <b>Synchronous network</b><br/>Global clock, & there is a known (constant) latency L in which all messages are assumed to be received. For instance all messages propagate in 5 seconds.<br/><br/>\n\n  <b>Partially Synchronous network</b><br/>There is some unknown latency L in which all messages are assumed to be received. It is important to note that this latency is unknown and could be extremely high.<br/><br/>\n\n  <b>Asynchronous network</b><br/>Local clock, & there are no timing assumptions made. We are not able to determine objectively the time ordering of transactions, though each individual node still has an idea of what order it saw messages arrive in (and different nodes can disagree). */}<br/><br/>\n\n In a decentralized system, we cannot rely on a global clock, and we cannot assume a constant latency for all messages to be delivered.<br/><br/>\n\n  This is the root cause of the double spend problem: an attacker can send one message to Jing & another message to Karl each spending the same coins. If Jing and Karl both accept those transactions, their states will diverge and we will have a fork. Not good! We need decentralized consensus!\n            </div>\n          <div id=\"Overflow-bottom\"></div>\n        </div>\n        <div id = \"Network-container\">\n          <div id = \"Graph-container\">\n            <Tray\n              nodes={nodes}\n              selectedNodes={selectedNodes}\n              showState = {this.showState.bind(this)}\n              icons = {iconMap}\n            />\n            <Ledgers\n              nodes={selectedNodes}\n              showState = {this.showState.bind(this)}\n              icons = {iconMap}/>\n            <Graph ref={instance => { this.graph = instance; }}\n             id='graph-id' // id is mandatory, if no id is defined rd3g will throw an error\n             data={data}\n             config={myConfig}\n             onClickNode={this.onClickNode.bind(this)}\n             clickedNode = {clickedNode}\n             onClickLink={onClickLink}\n             onMouseOverNode={this.onMouseOverNode.bind(this)}\n             onMouseOutNode={this.onMouseOutNode.bind(this)}\n             onMouseOverLink={onMouseOverLink}\n             onMouseOutLink={onMouseOutLink}\n             doubleSpend = {this.doubleSpend.bind(this)}\n             spend = {this.spend.bind(this)}\n             deselectNode = {this.deselectNode.bind(this)}\n             visibleState = {this.visibleState.bind(this)}\n             messages={messages}\n             time={time}\n             speed={speed}\n             paused={paused}\n             onTick = {this.getTick.bind(this)}\n             nodeState = {this.getNode.bind(this)}/>\n          </div>\n          <div id=\"Input-container\">\n            <div id=\"Controls-container\">\n              <Controls\n              onPause = {this.pause.bind(this)}\n              onPauseTxs = {this.pauseTxs.bind(this)}\n              paused = {paused}\n              pausedTxs = {pausedTxs}\n              togglePopup = {this.togglePopup.bind(this)}\n              stepbackward = {this.stepbackward.bind(this)}\n              stepforward = {this.stepforward.bind(this)}\n              rewind = {this.rewind.bind(this)}\n              fastforward = {this.fastforward.bind(this)}\n              reset = {this.reset.bind(this)}/>\n            </div>\n            {/*<div id=\"Parameters-container\">\n              <Parameters\n              setSpeed = {this.setSpeed.bind(this)}\n              setLatency = {this.setLatency.bind(this)}/>\n            </div>*/}\n          </div>\n        </div>\n        <Instructions\n        show= {this.state.showPopup}\n        handleClose={this.togglePopup.bind(this)}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Network;\n","import React, { Component } from 'react';\nimport '../styles/App.css';\nimport Network from './Network.js';\n\n\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Network/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './components/App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nregisterServiceWorker();\n","var EthCrypto = require('eth-crypto')\n\nfunction getTxHash (tx) {\n  return EthCrypto.hash.keccak256(JSON.stringify(tx))\n}\n\nfunction getColor(state) {\n  return \"#\" + EthCrypto.hash.keccak256(JSON.stringify(state)).substr(-6)\n}\n\nclass Node {\n  constructor (wallet, genesis, network) {\n    // Blockchain identity\n    this.wallet = wallet\n    // P2P Node identity -- used for connecting to peers\n    // this.p2pNodeId = EthCrypto.createIdentity()\n    // this.pid = this.p2pNodeId.address\n    this.pid = wallet.address\n    this.network = network\n    this.state = genesis\n    this.color = getColor(genesis)\n    this.transactions = []\n    this.invalidNonceTxs = {}\n  }\n\n  onReceive (tx) {\n    if (this.transactions.includes(tx)) {\n      return\n    }\n    this.transactions.push(tx)\n    this.applyTransaction(tx)\n    this.network.broadcast(this.pid, tx)\n    this.applyInvalidNonceTxs(tx.contents.from)\n  }\n\n  applyInvalidNonceTxs (address) {\n    const targetNonce = this.state[address].nonce\n    if (address in this.invalidNonceTxs && targetNonce in this.invalidNonceTxs[address]) {\n      this.applyTransaction(this.invalidNonceTxs[address][targetNonce])\n      delete this.invalidNonceTxs[address][targetNonce]\n      this.applyInvalidNonceTxs(address)\n    }\n  }\n\n  tick () {}\n\n  generateTx (to, amount) {\n    const unsignedTx = {\n      type: 'send',\n      amount: amount,\n      from: this.wallet.address,\n      to: to,\n      nonce: this.state[this.wallet.address].nonce\n    }\n    const tx = {\n      contents: unsignedTx,\n      sig: EthCrypto.sign(this.wallet.privateKey, getTxHash(unsignedTx))\n    }\n    return tx\n  }\n\n  applyTransaction (tx) {\n    // Check the from address matches the signature\n    const signer = EthCrypto.recover(tx.sig, getTxHash(tx.contents))\n    if (signer !== tx.contents.from) {\n      throw new Error('Invalid signature!')\n    }\n    // If we don't have a record for this address, create one\n    if (!(tx.contents.to in this.state)) {\n      this.state[[tx.contents.to]] = {\n        balance: 0,\n        nonce: 0\n      }\n    }\n    // Check that the nonce is correct for replay protection\n    if (tx.contents.nonce !== this.state[[tx.contents.from]].nonce) {\n      // If it isn't correct, then we should add the transaction to invalidNonceTxs\n      if (!(tx.contents.from in this.invalidNonceTxs)) {\n        this.invalidNonceTxs[tx.contents.from] = {}\n      }\n      this.invalidNonceTxs[tx.contents.from][tx.contents.nonce] = tx\n      return\n    }\n    if (tx.contents.type === 'send') { // Send coins\n      if (this.state[[tx.contents.from]].balance - tx.contents.amount < 0) {\n        return\n        // throw new Error('Not enough money!')\n      }\n      this.state[[tx.contents.from]].balance -= tx.contents.amount\n      this.state[[tx.contents.to]].balance += tx.contents.amount\n    } else {\n      throw new Error('Invalid transaction type!')\n    }\n    this.state[[tx.contents.from]].nonce += 1\n    this.color = getColor(this.state)\n  }\n}\n\nmodule.exports = {Node, getTxHash}\n","const _ = require('lodash')\nconst d3 = require('d3-random')\nconst seedrandom = require('seedrandom')\n\nclass NetworkSimulator {\n  constructor (latency, packetLoss) {\n    const normalRandom = d3.randomNormal.source(seedrandom('a22ebc7c488a3a47'))(latency, (latency * 2) / 5)\n    this.agents = []\n    this.latencyDistribution = () => Math.floor(Math.max(normalRandom(), 0))\n    this.time = 0\n    this.messageQueue = {}\n    this.peers = {}\n    this.packetLoss = packetLoss\n  }\n\n  connectPeer (newPeer, numConnections) {\n    newPeer.network = this\n    const shuffledAgents = _.shuffle(this.agents)\n    this.agents.push(newPeer)\n    this.peers[newPeer.pid] = []\n    for (let a of shuffledAgents.slice(0, numConnections)) {\n      this.peers[newPeer.pid].push(a)\n      this.peers[a.pid].push(newPeer)\n    }\n  }\n\n  broadcast (sender, message) {\n    for (let pid of this.peers[sender]) {\n      this.broadcastTo(sender, pid, message)\n    }\n  }\n\n  broadcastTo (sender, receiver, message) {\n    const recvTime = this.time + this.latencyDistribution()\n    if (!(recvTime in this.messageQueue)) {\n      this.messageQueue[recvTime] = []\n    }\n    this.messageQueue[recvTime].push({sender: sender,\n                                     sentTime: this.time,\n                                     recipient: receiver,\n                                     recvTime: recvTime,\n                                     message})\n  }\n\n  tick () {\n    if (this.time in this.messageQueue) {\n      for (let {recipient, message} of this.messageQueue[this.time]) {\n        if (Math.random() > this.packetLoss) {\n          recipient.onReceive(message)\n        }\n      }\n      delete this.messageQueue.time\n    }\n    for (let a of this.agents) {\n      a.tick()\n    }\n    this.time += 1\n  }\n\n  run (steps) {\n    for (let i = 0; i < steps; i++) {\n      this.tick()\n    }\n  }\n}\n\nmodule.exports = NetworkSimulator\n"],"sourceRoot":""}