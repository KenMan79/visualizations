{"version":3,"sources":["c2_NetworkDoubleSpends/createNetSim.js","c2_NetworkDoubleSpends/Latency_Based_Consensus/createFTNetSim.js","c2_NetworkDoubleSpends/nodeAgent.js","c2_NetworkDoubleSpends/networksim.js","components/Controls.js","components/Ledger.jsx","components/Ledgers.jsx","components/Instructions.jsx","components/TrayButton.jsx","components/Tray.jsx","components/Graph.js","components/NodeControls.js","components/Sandbox.js","components/latency-based-consensus/Ledger.jsx","components/latency-based-consensus/Ledgers.jsx","components/latency-based-consensus/Instructions.jsx","components/latency-based-consensus/Graph.js","components/latency-based-consensus/Sandbox.js","components/App.js","registerServiceWorker.js","index.js","c2_NetworkDoubleSpends/Latency_Based_Consensus/FaultTolerant.js"],"names":["EthCrypto","__webpack_require__","NetworkSimulator","Spender","wallet","genesis","network","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","pausedSpending","that","otherNodes","nodes","filter","n","address","Math","floor","random","length","state","balance","tx","generateTx","getRandomReceiver","transactions","push","applyTransaction","broadcast","pid","Node","wallets","i","createIdentity","nonce","JSON","parse","stringify","connectPeer","module","exports","FTSpender","delta","_get","prototype","sendTx","getTxHash","hash","keccak256","invalidNonceTxs","setColor","includes","applyInvalidNonceTxs","contents","from","targetNonce","to","amount","unsignedTx","type","sig","sign","privateKey","color","substr","recover","Error","_","d3","seedrandom","latency","packetLoss","randomNormal","source","agents","latencyDistribution","randomUniform","time","messageQueue","peers","newPeer","numConnections","shuffledAgents","shuffle","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","slice","Symbol","iterator","next","done","a","value","err","return","sender","message","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","broadcastTo","receiver","recvTime","sentTime","recipient","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","_ref2","onReceive","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","tick","steps","components_Controls","_ref","paused","onPause","onPauseTxs","togglePopup","pausedTxs","adjustSpeed","react_default","createElement","id","Button","onClick","Glyphicon","glyph","es_default","onChange","components_Ledger","Ledger","props","node","newTxs","updatedInvalidNonceTxs","Object","keys","forEach","_loop","find","newTx","lodash_default","isEqual","_loop2","_i","showState","_this2","_this$props","icons","updateInvalidNonceTxs","data","map","nodeId","key","substring","nonceData","nonceTable","style","display","backgroundColor","Number","parseInt","textColor","className","alt","src","width","e","clicked","react","components_Ledgers","index","components_Instructions","show","handleClose","colorPopover","Popover","title","spendPopover","doubleSpendPopover","transactionsPopover","Modal","onHide","Header","closeButton","Title","Body","href","YouTube","videoId","opts","height","playerVars","autoplay","OverlayTrigger","overlay","Footer","components_TrayButton","TrayButton","TrayButton_classCallCheck","TrayButton_getPrototypeOf","bind","TrayButton_assertThisInitialized","isSelected","styles","borderRadius","components_Tray","selectedNodes","Graph_speed","force","strength","enterNode","selection","classed","append","attr","d","constructor","name","gerbil","updateNode","x","y","enterLink","updateLink","target","enterMessage","getNodeById","getMsgPos","msg","coord","progress","recCoord","sentCoord","Graph_updateMessage","transition","duration","ease","updateGraph","selectAll","resize","console","log","window","innerWidth","innerHeight","zoomed","components_Graph","d3Graph","viz","on","nextProps","speed","d3Nodes","enter","pageX","pageY","exit","remove","d3Links","links","insert","d3Messages","messages","msgEnter","merge","distance","ref","el","components_NodeControls","doubleSpend","spend","hide","ICONS","Sandbox_data","iconMap","Sandbox_i","createNetSim","Sandbox_step","Sandbox_iterator","Sandbox_iteratorNormalCompletion","Sandbox_node","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","peer","components_Sandbox","Sandbox","Sandbox_classCallCheck","Sandbox_possibleConstructorReturn","Sandbox_getPrototypeOf","history","showPopup","timer","currNetwork","oldQ","newMsg","clone_default","setMessageQueue","setState","clickedNode","clickedX","clickedY","_this$state","stop","evilNode","drEvil","getCurrNode","victims","spends","isDoubleSpend","currNode","getTick","event","raw","scaled","min","max","_this$state2","onClickNode","position","left","top","deselectNode","pause","pauseTxs","latency_based_consensus_Ledger","Ledger_classCallCheck","Ledger_possibleConstructorReturn","Ledger_getPrototypeOf","pendingTxs","timeout","Ledger_objectSpread","updatePendingTxs","pendingTxData","percentage","timestamp","sigs","dist_default","strokeWidth","textForPercentage","path","strokeLinecap","stroke","text","fill","pendingTxTable","latency_based_consensus_Ledgers","latency_based_consensus_Instructions","Graph_width","Graph_height","Graph_force","Graph_enterNode","Graph_updateNode","Graph_enterLink","Graph_updateLink","Graph_enterMessage","Graph_getNodeById","Graph_getMsgPos","latency_based_consensus_Graph_updateMessage","Graph_updateGraph","Graph_resize","Graph_zoomed","latency_based_consensus_Graph","Sandbox_ICONS","latency_based_consensus_Sandbox_data","Sandbox_iconMap","latency_based_consensus_Sandbox_i","createFTNetSim","latency_based_consensus_Sandbox_step","latency_based_consensus_Sandbox_iterator","latency_based_consensus_Sandbox_iteratorNormalCompletion","latency_based_consensus_Sandbox_node","Sandbox_iteratorNormalCompletion5","Sandbox_didIteratorError5","Sandbox_iteratorError5","Sandbox_step5","Sandbox_iterator5","Sandbox_peer","components_App","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","react_dom_default","render","document","getElementById","URL","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","FaultTolerant","seen","numObservers","addressSet","Set","slicedTx","messageHash","add","addressesFromSigs","size","addToPending","finalTimeout","sort","b","toApply"],"mappings":"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","file":"static/js/main.cbfbdad7.chunk.js","sourcesContent":["var EthCrypto = require('eth-crypto')\nvar NetworkSimulator = require('./networksim')\nvar {Node} = require('./nodeAgent')\n\n// Spender is a Node that sends a random transaction at every tick()\nclass Spender extends Node {\n  constructor (wallet, genesis, network) {\n    super(wallet, genesis, network)\n    this.pausedSpending = true\n  }\n\n  // returns a random wallet address (excluding the Spender)\n  getRandomReceiver () {\n    const that = this\n    // create array without this Node\n    const otherNodes = nodes.filter(function (n) {\n      return n.wallet.address !== that.wallet.address\n    });\n    const randomNode = otherNodes[Math.floor(Math.random() * otherNodes.length)]\n    return randomNode.wallet.address\n  }\n\n  tick () {\n    // If we have no money, don't do anything!\n    if (this.state[this.wallet.address].balance < 10 || this.pausedSpending ) {\n      return\n    }\n    // Generate random transaction .5% of the ticks\n    if(Math.random() < 0.01) {\n      const tx = this.generateTx(this.getRandomReceiver(), 10)\n      this.transactions.push(tx)\n      this.applyTransaction(tx)\n      // Broadcast this tx to the network\n      this.network.broadcast(this.pid, tx)\n    }\n  }\n}\n\n// ****** Test this out using a simulated network ****** //\nconst numNodes = 4\nconst wallets = []\nconst genesis = {}\nconst network = new NetworkSimulator(15, 0);\nfor (let i = 0; i < numNodes; i++) {\n  // Create new identity\n  wallets.push(EthCrypto.createIdentity())\n  // Add that node to our genesis block & give them an allocation\n  genesis[wallets[i].address] = {\n    balance: 100,\n    nonce: 0\n  }\n}\nconst nodes = []\n// Create new nodes based on our wallets, and connect them to the network\nfor (let i = 0; i < numNodes; i++) {\n  nodes.push(new Spender(wallets[i], JSON.parse(JSON.stringify(genesis)), network))\n  network.connectPeer(nodes[i], 2)\n}\n\nmodule.exports = {nodes, network}\n","var EthCrypto = require('eth-crypto')\nvar NetworkSimulator = require('../networksim')\nvar FaultTolerant = require('./FaultTolerant')\n\nclass FTSpender extends FaultTolerant {\n  constructor (wallet, genesis, network, delta) {\n    super(wallet, genesis, network, delta)\n    this.pausedSpending = true\n  }\n\n  // returns a random wallet address (excluding the Spender)\n  getRandomReceiver () {\n    const that = this\n    // create array without this Node\n    const otherNodes = nodes.filter(function (n) {\n      return n.wallet.address !== that.wallet.address\n    });\n    const randomNode = otherNodes[Math.floor(Math.random() * otherNodes.length)]\n    return randomNode.wallet.address\n  }\n\n  tick () {\n    // If we have no money, don't do anything!\n    super.tick()\n    if (this.state[this.wallet.address].balance < 10 || this.pausedSpending ) {\n      return\n    }\n    // Generate random transaction .5% of the ticks\n    if(Math.random() < 0.01) {\n      this.sendTx(this.getRandomReceiver(), 10)\n    }\n  }\n}\n\n// ****** Test this out using a simulated network ****** //\nconst numNodes = 5\nconst wallets = []\nconst genesis = {}\nconst latency = 15 //10-15 ticks per message\nconst packetLoss = 0\nconst delta = latency\nconst numConnections = 2\nconst network = new NetworkSimulator(latency, packetLoss);\nfor (let i = 0; i < numNodes; i++) {\n  // Create new identity\n  wallets.push(EthCrypto.createIdentity())\n  // Add that node to our genesis block & give them an allocation\n  genesis[wallets[i].address] = {\n    balance: 100,\n    nonce: 0\n  }\n}\nconst nodes = []\n// Create new nodes based on our wallets, and connect them to the network\nfor (let i = 0; i < numNodes; i++) {\n  nodes.push(new FTSpender(wallets[i], JSON.parse(JSON.stringify(genesis)), network, delta))\n  network.connectPeer(nodes[i], numConnections)\n}\n\nmodule.exports = {nodes, network}\n","var EthCrypto = require('eth-crypto')\n\nfunction getTxHash (tx) {\n  return EthCrypto.hash.keccak256(JSON.stringify(tx))\n}\n\nclass Node {\n  constructor (wallet, genesis, network) {\n    // Blockchain identity\n    this.wallet = wallet\n    // P2P Node identity -- used for connecting to peers\n    // this.p2pNodeId = EthCrypto.createIdentity()\n    // this.pid = this.p2pNodeId.address\n    this.pid = wallet.address\n    this.network = network\n    this.state = genesis\n    this.transactions = []\n    this.invalidNonceTxs = {}\n    this.setColor()\n  }\n\n  onReceive (tx) {\n    if (this.transactions.includes(tx)) {\n      return\n    }\n    this.transactions.push(tx)\n    this.applyTransaction(tx)\n    this.network.broadcast(this.pid, tx)\n    this.applyInvalidNonceTxs(tx.contents.from)\n  }\n\n  applyInvalidNonceTxs (address) {\n    const targetNonce = this.state[address].nonce\n    if (address in this.invalidNonceTxs && targetNonce in this.invalidNonceTxs[address]) {\n      this.applyTransaction(this.invalidNonceTxs[address][targetNonce])\n      delete this.invalidNonceTxs[address][targetNonce]\n      this.applyInvalidNonceTxs(address)\n    }\n  }\n\n  tick () {}\n\n  generateTx (to, amount) {\n    const unsignedTx = {\n      type: 'send',\n      amount: amount,\n      from: this.wallet.address,\n      to: to,\n      nonce: this.state[this.wallet.address].nonce\n    }\n    const tx = {\n      contents: unsignedTx,\n      sig: EthCrypto.sign(this.wallet.privateKey, getTxHash(unsignedTx))\n    }\n    return tx\n  }\n\n  setColor() {\n    this.color = \"#\" + EthCrypto.hash.keccak256(JSON.stringify(this.state)).substr(-6)\n  }\n\n  applyTransaction (tx) {\n    // Check the from address matches the signature\n    const signer = EthCrypto.recover(tx.sig, getTxHash(tx.contents))\n    if (signer !== tx.contents.from) {\n      throw new Error('Invalid signature!')\n    }\n    // If we don't have a record for this address, create one\n    if (!(tx.contents.to in this.state)) {\n      this.state[[tx.contents.to]] = {\n        balance: 0,\n        nonce: 0\n      }\n    }\n    // Check that the nonce is correct for replay protection\n    if (tx.contents.nonce !== this.state[[tx.contents.from]].nonce) {\n      // If it isn't correct, then we should add the transaction to invalidNonceTxs\n      if (!(tx.contents.from in this.invalidNonceTxs)) {\n        this.invalidNonceTxs[tx.contents.from] = {}\n      }\n      this.invalidNonceTxs[tx.contents.from][tx.contents.nonce] = tx\n      return\n    }\n    if (tx.contents.type === 'send') { // Send coins\n      if (this.state[[tx.contents.from]].balance - tx.contents.amount < 0) {\n        return\n        // throw new Error('Not enough money!')\n      }\n      this.state[[tx.contents.from]].balance -= tx.contents.amount\n      this.state[[tx.contents.to]].balance += tx.contents.amount\n    } else {\n      throw new Error('Invalid transaction type!')\n    }\n    this.state[[tx.contents.from]].nonce += 1\n    this.setColor()\n  }\n}\n\nmodule.exports = {Node, getTxHash}\n","const _ = require('lodash')\nconst d3 = require('d3-random')\nconst seedrandom = require('seedrandom')\n\nclass NetworkSimulator {\n  constructor (latency, packetLoss) {\n    const normalRandom = d3.randomNormal.source(seedrandom('a22ebc7c488a3a47'))(latency, (latency * 2) / 5)\n    this.agents = []\n    // this.latencyDistribution = () => Math.floor(Math.max(normalRandom(), 0))\n    this.latencyDistribution =() => Math.floor(d3.randomUniform((latency * 2) / 5, latency)())\n    this.time = 0\n    this.messageQueue = {}\n    this.peers = {}\n    this.packetLoss = packetLoss\n  }\n\n  connectPeer (newPeer, numConnections) {\n    newPeer.network = this\n    const shuffledAgents = _.shuffle(this.agents)\n    this.agents.push(newPeer)\n    this.peers[newPeer.pid] = []\n    for (let a of shuffledAgents.slice(0, numConnections)) {\n      this.peers[newPeer.pid].push(a)\n      this.peers[a.pid].push(newPeer)\n    }\n  }\n\n  broadcast (sender, message) {\n    for (let pid of this.peers[sender]) {\n      this.broadcastTo(sender, pid, message)\n    }\n  }\n\n  broadcastTo (sender, receiver, message) {\n    const recvTime = this.time + this.latencyDistribution()\n    if (!(recvTime in this.messageQueue)) {\n      this.messageQueue[recvTime] = []\n    }\n    this.messageQueue[recvTime].push({sender: sender,\n                                     sentTime: this.time,\n                                     recipient: receiver,\n                                     recvTime: recvTime,\n                                     message})\n  }\n\n  tick () {\n    if (this.time in this.messageQueue) {\n      for (let {recipient, message} of this.messageQueue[this.time]) {\n        if (Math.random() > this.packetLoss) {\n          recipient.onReceive(message)\n        }\n      }\n      delete this.messageQueue[this.time]\n    }\n    for (let a of this.agents) {\n      a.tick()\n    }\n    this.time += 1\n  }\n\n  run (steps) {\n    for (let i = 0; i < steps; i++) {\n      this.tick()\n    }\n  }\n}\n\nmodule.exports = NetworkSimulator\n","import React from 'react';\nimport { Button, Glyphicon } from 'react-bootstrap';\nimport Switch from 'rc-switch';\n\nconst Controls = ({paused, onPause, onPauseTxs, pausedTxs, togglePopup, adjustSpeed}) => {\n  return (\n      <div id = \"Controls\">\n        <Button onClick={onPause}>{paused ?\n          <Glyphicon glyph=\"play\" />\n         : <Glyphicon glyph=\"pause\" />}</Button>\n        <div id=\"txToggle\">\n        Send Transactions <Switch\n           onChange={onPauseTxs}\n         />\n         </div>\n{/*        <Button onClick={adjustSpeed}>\n           <Glyphicon glyph=\"forward\" />\n        </Button>*/}\n        <Button onClick={togglePopup}>\n          <Glyphicon glyph=\"question-sign\" />\n        </Button>\n      </div>\n  );\n}\n\nexport default Controls;\n","import React, { Component } from 'react';\nimport _ from 'lodash'\n\nclass Ledger extends Component {\n  constructor(props) {\n    super(props)\n    this.invalidNonceTxs = []\n  }\n\n  updateInvalidNonceTxs() {\n    const {invalidNonceTxs} = this\n    const {node} = this.props\n    const newTxs = []\n    const updatedInvalidNonceTxs = []\n\n    Object.keys(node.invalidNonceTxs).forEach(function(address, i) {\n      Object.keys(node.invalidNonceTxs[address]).forEach(function(nonce, i) {\n        const tx = node.invalidNonceTxs[address][nonce]\n        newTxs.push(tx.contents)\n      })\n    })\n    //add Old txs into updatedInvalidNonceTxs if it's in the array of new txs\n    for (let tx of invalidNonceTxs) {\n      const hasOldTx = newTxs.find(newTx => _.isEqual(newTx, tx))\n      if (hasOldTx) {\n        updatedInvalidNonceTxs.push(tx)\n      }\n    }\n    //add all new txs into updatedInvalidNonceTxs\n    for(let newTx of newTxs) {\n      const hasNewTx = updatedInvalidNonceTxs.find(tx => _.isEqual(newTx, tx))\n      if (!hasNewTx) {\n        updatedInvalidNonceTxs.push(newTx)\n      }\n    }\n    this.invalidNonceTxs = updatedInvalidNonceTxs\n  }\n\n  clicked(showState, node) {\n    showState(node)\n  }\n\n  render() {\n    const {node, icons, showState} = this.props\n\n    this.updateInvalidNonceTxs()\n\n    const data = Object.keys(node.state).map(function(nodeId, i) {\n      return (\n        <tr key={i}>\n          <td>{nodeId.substring(0,5)}</td>\n          <td>{node.state[nodeId].balance}</td>\n          <td>{node.state[nodeId].nonce}</td>\n        </tr>\n      )\n    })\n\n    const nonceData = this.invalidNonceTxs.map(function(tx, i) {\n      return (\n        <tr key={i}>\n          <td>{tx.from.substring(0,5)}</td>\n          <td>{tx.to.substring(0,5)}</td>\n          <td>{tx.amount}</td>\n          <td>{tx.nonce}</td>\n        </tr>\n      )\n    })\n    const nonceTable =\n      <div style = {this.invalidNonceTxs.length ? {} : {display: 'none'}}>\n        <p>Invalid Nonce Transactions</p>\n        <table>\n          <tbody>\n            <tr>\n              <th>From</th>\n              <th>To</th>\n              <th>Amount</th>\n              <th>Nonce</th>\n            </tr>\n            { nonceData }\n         </tbody>\n        </table>\n      </div>\n\n    const backgroundColor = Number.parseInt(node.color.slice(1), 16)\n\n    const r = (backgroundColor >> 16) & 0xff\n    const g = (backgroundColor >> 8) & 0xff\n    const b = backgroundColor & 0xff\n\n    const brightness = (r * 0.299 + g * 0.587 + b * 0.114)/255\n\n    let textColor = \"white\"\n    if (brightness > 0.5) {\n      textColor = \"black\"\n    }\n\n    return (\n        <div className=\"Ledger\" id={\"ledger-\" + node.pid} style={{ backgroundColor: node.color, color: textColor }}>\n          <img alt=\"Gerbil\" src={icons[node.pid]} width=\"30\" />\n          <span className=\"ledger-title\">\n            {' ' + node.pid.substring(0,5)}\n          </span>\n          <button className=\"LedgerMinimizeButton\" onClick={(e) => this.clicked(showState, node)}>\n            <div className=\"LedgerMinimizeButtonIcon\" style={{ backgroundColor: textColor }}></div>\n          </button>\n          <table>\n           <tbody>\n            <tr>\n              <th>Address</th>\n              <th>Balance</th>\n              <th>Nonce</th>\n              <th>            </th>\n            </tr>\n            { data }\n           </tbody>\n          </table>\n          {nonceTable}\n        </div>\n    );\n  }\n}\n\nexport default Ledger;\n","import React from 'react';\nimport Ledger from './Ledger.jsx'\n\nconst Ledgers = ({nodes, icons, showState}) => {\n  return (\n    <div id=\"Ledgers\">\n      {Object.keys(nodes).map((pid, index) =>\n        <Ledger\n          key={pid}\n          node={nodes[pid]}\n          icons={icons}\n          showState={showState}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default Ledgers;\n","import React from 'react';\nimport { Modal, Button, Popover, OverlayTrigger } from 'react-bootstrap';\nimport YouTube from 'react-youtube';\n\nconst Instructions = ({show, handleClose}) => {\n  const colorPopover = (\n    <Popover id=\"modal-popover\" title=\"\">\n      For the technical people: We took the first 6 hexadecimal characters of the Keccak-256 hash of the state and turned it into a hex color!\n    </Popover>\n  );\n\n  const spendPopover = (\n    <Popover id=\"modal-popover\" title=\"Spend\">\n      Clicking \"Spend\" will make the selected node generate and propagate a transaction sending $10 to a random node.\n    </Popover>\n  );\n\n  const doubleSpendPopover = (\n    <Popover id=\"modal-popover\" title=\"Double Spend\">\n      Clicking \"Double Spend\" will make the selected node generate and selectively propagate two transactions each sending $10 to a different peer.\n      <br></br>\n     {/* Transaction 1 sending $10 to Peer 1 will be broadcasted directly to Peer 1, and Transaction 2 sending $10 to Peer 2 will be broadcasted directly to Peer 2.*/}\n    </Popover>\n  );\n\n  const transactionsPopover = (\n    <Popover id=\"modal-popover\" title=\"Resume Transactions\">\n      Switching on \"Resume Transactions\" will make all nodes randomly generate and send transactions.\n      <br></br>\n    </Popover>\n  );\n\n  const opts = {\n    height: '300',\n    width: '550',\n    playerVars: { // https://developers.google.com/youtube/player_parameters\n      autoplay: 0\n    }\n  };\n\n  return (\n    <Modal show={show} onHide={handleClose}>\n     <Modal.Header closeButton>\n       <Modal.Title>Instructions</Modal.Title>\n     </Modal.Header>\n     <Modal.Body>\n       <h4>What is this?</h4>\n       <p>\n        This is an interactive network simulation designed as a part of Chapter 2 of {' '}\n           <a href=\"https://cryptoeconomics.study/\">Cryptoeconomics.study</a>. To best understand the double spend problem, here is Ethereum Researcher Karl Floersch's explanation in section 2.2 of the course:\n           <YouTube\n             videoId=\"k6JVGR7Jx0A\"\n             opts={opts}\n           />\n       </p>\n       <h4>How do you send a transaction?</h4>\n       <p>\n        Click on a node to either {' '}\n          <OverlayTrigger overlay={spendPopover}>\n            <a href=\"\">Spend</a>\n          </OverlayTrigger>\n        {' '} or {' '}\n          <OverlayTrigger overlay={doubleSpendPopover}>\n            <a href=\"\">Double Spend</a>\n          </OverlayTrigger>\n        {' '}. You can also toggle the {' '}\n          <OverlayTrigger overlay={transactionsPopover}>\n            <a href=\"\">Resume Transactions</a>\n          </OverlayTrigger>\n          {' '}switch.\n       </p>\n       <h4>Why is my network graph so small?</h4>\n       <p>\n        To increase the size of the network graph, hover over it and scroll upwards. You can also reposition the graph by dragging it around.\n       </p>\n\n       <h4>What do the colors mean?</h4>\n       <p>\n        The color of each node {' '}\n            <OverlayTrigger overlay={colorPopover}>\n              <a href = \"\">represents</a>\n            </OverlayTrigger>{' '} the state of that node's ledger.\n       </p>\n     </Modal.Body>\n     <Modal.Footer>\n       <Button onClick={handleClose}>Close</Button>\n     </Modal.Footer>\n   </Modal>\n  );\n}\n\nexport default Instructions;\n","import React, { Component } from 'react';\n\nclass TrayButton extends Component {\n  constructor(props) {\n    super(props)\n    this.clicked = this.clicked.bind(this)\n  }\n\n  clicked(showState, node) {\n    showState(node)\n  }\n\n  render() {\n    const {isSelected, icons, node, showState} = this.props\n\n    const styles = {\n      height: \"45px\",\n      width: \"45px\",\n      backgroundColor: node.color,\n      borderRadius: \"50%\",\n      display: isSelected ? \"none\" : \"flex\",\n      // visibility: isSelected ? \"hidden\" : \"visible\"\n    }\n\n    if (node) {\n      return (\n          <div onClick={(e) => this.clicked(showState, node)} className=\"TrayButton\" id={\"trayButton-\" + node.pid} style={styles}>\n            <img alt=\"Gerbil\" src={icons[node.pid]} width=\"25\" />\n         </div>\n      );\n    } else {\n      return (<div></div>);\n    }\n  }\n}\n\nexport default TrayButton;\n","import React from 'react';\nimport TrayButton from './TrayButton.jsx'\n\nconst Tray = ({nodes, selectedNodes, icons, showState}) => {\n  return (\n    <div id=\"Tray\">\n      {Object.keys(nodes).map((pid, index) =>\n        <TrayButton\n          key={pid}\n          isSelected={(nodes[pid].pid in selectedNodes)}\n          icons={icons}\n          node={nodes[pid]}\n          showState={showState}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default Tray;\n","import React, { Component } from 'react';\nimport * as d3 from 'd3';\n\nvar width = 960;\nvar height = 700;\nlet speed = 1;\n//Make responsive\nvar force = d3.forceSimulation()\n        .force(\"charge\", d3.forceManyBody().strength(-10000))\n        .force(\"center\", d3.forceCenter(width / 2, height / 2));\n\nvar zoom = d3.zoom();\n\n// *****************************************************\n// ** d3 functions to manipulate attributes\n// *****************************************************\n\n// **** Node Functions  ****\n\nvar enterNode = (selection) => {\n  selection.classed('node', true)\n    .append('circle')\n    .attr(\"r\", d=>{\n      if (d.constructor.name === 'Spender') return 20\n\n    })\n  selection.append(\"svg:image\")\n    .attr(\"xlink:href\", d => d.gerbil)\n    .attr(\"x\", d => -12.5)\n    .attr(\"y\", d => -12.5)\n    .attr(\"height\", 25)\n    .attr(\"width\", 25)\n};\n\nvar updateNode = (selection) => {\n  selection.attr(\"transform\", (d) => \"translate(\" + d.x + \",\" + d.y + \")\")\n    .attr('fill', (d) => {\n      // return d3.color(d.color)\n      //   .brighter(0.5)\n      return d.color\n    })\n    .attr('stroke', (d) => d.color)\n    .attr('stroke-width', (d) => 5)\n};\n\n// **** Link Functions  ****\n\nvar enterLink = (selection) => {\n  selection.classed('link', true)\n    .attr(\"stroke-width\", 2)\n    .attr(\"stroke\", 'grey')\n};\n\nvar updateLink = (selection) => {\n  selection.attr(\"x1\", (d) => d.source.x)\n    .attr(\"y1\", (d) => d.source.y)\n    .attr(\"x2\", (d) => d.target.x)\n    .attr(\"y2\", (d) => d.target.y);\n};\n\n// **** Message Functions  ****\nvar enterMessage = (selection) => {\n  selection.classed('message', true)\n    .attr(\"r\", 6)\n    .attr(\"fill\", d => '#' + d.message.sig.slice(2,8))\n    .attr(\"fill-opacity\", 0.5)\n    .attr('stroke-width', (d) => 3)\n    .attr('stroke', (d) => '#' + d.message.sig.slice(2,8))\n    .attr(\"cx\", d=> getNodeById(d.sender).x)\n    .attr(\"cy\", d=> getNodeById(d.sender).y)\n}\n\nvar getNodeById = (id) => {\n  return force.nodes().find(\n    (node) => node.pid === id\n  )\n}\n\nconst getMsgPos = (msg, coord) => {\n  const distance = msg.time - msg.sentTime\n  const length = msg.recvTime - msg.sentTime\n  const progress = distance/length\n  const recCoord = getNodeById(msg.recipient)[coord]\n  const sentCoord = getNodeById(msg.sender)[coord]\n  return progress * (recCoord - sentCoord) + sentCoord\n}\n\nvar updateMessage = (selection) => {\n  selection\n  .transition()\n  .duration(300/speed)\n  .ease(d3.easeLinear)\n  .attr(\"cx\", d => getMsgPos(d,'x'))\n  .attr(\"cy\", d => getMsgPos(d, 'y'))\n}\n\n// **** Graph Functions  ****\n\nvar updateGraph = (selection) => {\n  selection.selectAll('.node')\n    .call(updateNode);\n  selection.selectAll('.link')\n    .call(updateLink)\n  // selection.selectAll('.message')\n  //   .call(updateMessage)\n};\n\nvar zoomed = (selection, width, height) => {\n  // Need to get the geometry right here\n  selection.attr('transform',\n            'translate(' + (width/2 - 900) + ', ' + (height/2 - 400) + ')scale(' + 1.5 + ')');\n  console.log(\"Zoomed\", width, height)\n};\n\nvar resize = (selection) => {\n  console.log(\"Resized\")\n  width = window.innerWidth;\n  height = window.innerHeight;\n  zoomed(selection, width, height)\n};\n\n// *****************************************************\n// ** Graph component\n// *****************************************************\n\nclass Graph extends Component {\n    componentDidMount() {\n      this.d3Graph = d3.select(this.viz);\n      force.on('tick', () => {\n        // after force calculation starts, call updateGraph\n        // which uses d3 to manipulate the attributes,\n        // and React doesn't have to go through lifecycle on each tick\n        this.d3Graph.call(updateGraph);\n      });\n\n      this.d3Graph.call(resize);\n      d3.select(window).on(\"resize\", () => {\n        this.d3Graph.call(resize);\n      });\n    }\n\n    shouldComponentUpdate(nextProps) {\n      const {onClick} = this.props\n      speed = nextProps.speed\n      this.d3Graph = d3.select(this.viz);\n      const d3Nodes = this.d3Graph.selectAll('.node')\n        .data(nextProps.nodes, (node) => node.pid);\n      d3Nodes.enter().append('g').call(enterNode)\n      .on('click', function(d){\n        onClick(d, d3.event.pageX, d3.event.pageY)\n      })\n      d3Nodes.exit().remove();\n      d3Nodes.call(updateNode);\n\n      const d3Links = this.d3Graph.selectAll('.link')\n        .data(nextProps.links)\n\n      d3Links.enter().insert('line', '.node').call(enterLink);\n      d3Links.exit().remove();\n      d3Links.call(updateLink);\n      const d3Messages = this.d3Graph.selectAll('.message')\n        .data(nextProps.messages, message => {\n          return message.message.sig + ':' +\n          message.recipient + ':' +\n          message.sender\n        });\n      const msgEnter = d3Messages.enter().insert('circle', '.node').call(enterMessage);\n      d3Messages.exit().remove();\n      d3Messages.merge(msgEnter).call(updateMessage);\n\n      // we should actually clone the nodes and links\n      // since we're not supposed to directly mutate\n      // props passed in from parent, and d3's force function\n      // mutates the nodes and links array directly\n      // we're bypassing that here for sake of brevity in example\n      force.nodes(nextProps.nodes)\n        .force(\"link\", d3.forceLink(nextProps.links)\n          .id(d => d.pid)\n          .distance(d=>50)\n          .strength(.3)\n        );\n      return false;\n    }\n\n    render() {\n      return (\n        <svg width={width} height={height}>\n          <g ref={el => this.viz = el} />\n        </svg>\n      );\n    }\n}\n\nexport default Graph;\n","import React from 'react';\n\nconst NodeControls = ({doubleSpend, spend, hide}) => {\n  return (\n      <div id = \"NodeControls\">\n        <button id = \"doubleSpend\" onClick={()=> {\n          doubleSpend()\n          hide()\n        }}>\n          Double Spend\n        </button>\n        <button id = \"spend\" onClick={()=> {\n          spend()\n          hide()\n        }}>\n          Spend\n        </button>\n      </div>\n  );\n}\n\nexport default NodeControls;\n","import React, { Component } from 'react';\nimport {nodes, network} from '../c2_NetworkDoubleSpends/createNetSim'\nimport Controls from './Controls.js'\nimport Ledgers from './Ledgers.jsx'\nimport Instructions from './Instructions.jsx'\nimport Tray from './Tray.jsx'\nimport Graph from './Graph.js'\nimport NodeControls from './NodeControls.js'\nimport * as d3 from 'd3'\n\n// import Parameters from './Parameters.js'\nimport clone  from 'clone';\n\nconst ICONS = [\n  'https://i.imgur.com/Wi9yFXw.png',\n  'https://i.imgur.com/U5Y99Rm.png',\n  'https://i.imgur.com/NPH4rqg.png',\n  'https://i.imgur.com/MptO0GC.png',\n  'https://i.imgur.com/yHwPVBF.png',\n  'https://i.imgur.com/yvv1MMb.png',\n  'https://i.imgur.com/I4Dlkik.png',\n  'https://i.imgur.com/jNB8LS6.png'\n]\n\nconst TICK_LENGTH = 300 //ms\n\n// graph payload (with minimalist structure)\nconst data = {\n  nodes: [],\n  links: []\n}\n\nlet iconMap = {}\nfor (let i = 0; i < nodes.length; i++) {\n  nodes[i].gerbil = ICONS[i]\n  iconMap[nodes[i].pid] = ICONS[i]\n}\nfor (const node of nodes) {\n  // connect them\n  for (const peer of network.peers[node.pid]) {\n    data.links.push({\n      source: node.pid,\n      target: peer.pid\n    })\n  }\n}\n\nclass Sandbox extends Component {\n  constructor() {\n    super()\n    this.state = {\n      // clickedNode: null,\n      selectedNodes:{},\n      history: [],\n      paused: false,\n      pausedTxs: true,\n      speed: 1,\n      showPopup: false //for DEV3\n    }\n  }\n\n  componentDidMount() {\n    for (let node of nodes) {\n      this.showState(node)\n    }\n    this.timer = d3.interval(this.tick.bind(this), TICK_LENGTH/this.state.speed);\n  }\n\n  setMessageQueue(currNetwork){\n    let oldQ = currNetwork.messageQueue\n    const messages = []\n    Object.keys(oldQ).forEach(function(key,index) {\n      for (let message of oldQ[key]) {\n        const newMsg = {...message, time: currNetwork.time}\n        newMsg.recipient = newMsg.recipient.pid\n        messages.push(newMsg)\n      }\n    });\n    return messages\n  }\n\n  tick() {\n    network.tick()\n    const history = this.state.history\n    history.push(clone(network)) // push a deep clone of the network object\n    const messages = this.setMessageQueue(network)\n    this.setState({history: history, messages: messages})\n  }\n\n  // getTick(time) {\n  //   const {history, selectedNodes, clickedNode} = this.state\n  //   if(time > history.length) {\n  //     throw new Error('You skipped a time step!')\n  //   } else if (time === history.length ) {\n  //     this.tick()\n  //   }\n  //   let messages = this.setMessageQueue(history[time])\n  //   this.setState({messages: messages, time: time})\n  // }\n\n  // getNode (nodeId, time) {\n  //   const currNetwork = this.state.history[time]\n  //   if (currNetwork) {\n  //     return currNetwork.agents.find((node) => {\n  //       return node.pid === nodeId;\n  //     });\n  //   }\n  // }\n\n  getCurrNode(nodeId) {\n    if (network) {\n      return network.agents.find((node) => node.pid === nodeId);\n    }\n  }\n\n  onClickNode (node, x, y) {\n    const {clickedNode} = this.state\n\n    if (clickedNode && node.pid === clickedNode.pid) {\n      this.setState({clickedNode: null})\n    } else {\n      this.setState({clickedNode: {...node, clickedX: x, clickedY: y}})\n    }\n  };\n\n  pause(){\n    const {paused, speed} = this.state\n    if (paused) {\n      this.timer = d3.interval(this.tick.bind(this), TICK_LENGTH/this.state.speed);\n    } else {\n      this.timer.stop()\n    }\n    this.setState({ paused: !paused })\n\n    //this.state.speed = 1    //(reset FF/Rewind)\n  }\n  pauseTxs(){\n    this.setState({ pausedTxs: !this.state.pausedTxs })\n    for(let node of nodes) {\n      node.pausedSpending = !node.pausedSpending\n    }\n  }\n\n  adjustSpeed(speed){\n    this.setState({speed : speed }, () => {\n     this.timer.stop()\n     this.timer = d3.interval(this.tick.bind(this), TICK_LENGTH/this.state.speed);\n   })\n  }\n\n  doubleSpend(evilNode){\n    evilNode = this.getCurrNode(evilNode.pid)\n    const drEvil = evilNode.pid\n    const victims = [network.peers[drEvil][0], network.peers[drEvil][1]]\n    const spends = [evilNode.generateTx(victims[0].wallet.address, 10), evilNode.generateTx(victims[1].wallet.address, 10)]\n    spends[0].isDoubleSpend = true\n    spends[1].isDoubleSpend = true\n    network.broadcastTo(drEvil, victims[0], spends[0])\n    network.broadcastTo(drEvil, victims[1], spends[1])\n\n    console.log('Double spender:', drEvil, 'victims:', victims, 'spends:', spends)\n  }\n\n  spend(currNode){\n    const node = this.getCurrNode(currNode.pid)\n    const tx = node.generateTx(node.getRandomReceiver(), 10)\n    node.transactions.push(tx)\n    node.applyTransaction(tx)\n    // Broadcast this tx to the network\n    network.broadcast(node.pid, tx)\n\n    // initiate random spend\n  }\n\n  showState(node){\n    // create popup with state\n    const {selectedNodes} = this.state\n    if (selectedNodes[node.pid]) {\n      delete selectedNodes[node.pid]\n    } else {\n      selectedNodes[node.pid] = node\n    }\n    this.setState({selectedNodes: selectedNodes})\n  }\n\n  togglePopup() {\n    this.setState({\n      showPopup: !this.state.showPopup\n    });\n  }\n\n  deselectNode(){\n    this.setState({clickedNode: null})\n  }\n\n  reset(){\n    console.log('reset')\n    this.getTick(0)\n  }\n  setSpeed(value){\n    let speed = value/1000.0\n    this.setState({speed : speed})\n    console.log('speeedooo', speed)\n\n  }\n  setLatency(event){\n    let raw = event.target.value\n    let scaled = Math.min(Math.max(parseInt(raw), 1), 10)\n    console.log('latency', raw, scaled)\n\n  }\n  setPacketLoss(event){\n    let raw = event.target.value\n    let scaled = Math.min(Math.max(parseInt(raw), 1), 20)\n    console.log('packetloss', raw, scaled)\n\n  }\n  render() {\n    const {clickedNode, selectedNodes, messages, time, paused, pausedTxs, speed} = this.state\n    return (\n      <div id='App-container'>\n        <div id='Text-container'>\n          <div id='Overflow-top'></div>\n          <h3>2.2: The Double Spend</h3>\n          <div id='Text'>\n            Building a centralized payments processor like Paypal is simple, but relies on trust that Paypal will not break the rules. A simple way to decentralize PayPal is to make clients download all transactions and run the PayPal code to generate their belief of the current state.\n            <br/>\n            <br/>\n            In a decentralized system, we cannot rely on a global clock, and we cannot assume a constant latency for all messages to be delivered.\n            <br/>\n            <br/>\n            This is the root cause of the double spend problem: an attacker can send one message to Jing & another message to Karl each spending the same coins. If Jing and Karl both accept those transactions, their states will diverge and we will have a fork. Not good! We need decentralized consensus!\n            </div>\n          <div id='Overflow-bottom'></div>\n        </div>\n        <div id = 'Network-container'>\n          <div id = 'Graph-container'>\n            <Tray\n              nodes={nodes}\n              selectedNodes={selectedNodes}\n              showState = {this.showState.bind(this)}\n              icons = {iconMap}\n            />\n            <Ledgers\n              nodes={selectedNodes}\n              showState = {this.showState.bind(this)}\n              icons = {iconMap}\n            />\n            <Graph\n              nodes={nodes}\n              links={data.links}\n              messages = {messages || []}\n              onClick = {this.onClickNode.bind(this)}\n              speed = {speed}\n           />\n           {clickedNode ? (\n            <div style= {{\n              position:'absolute',\n              left: clickedNode.clickedX - 400,\n              top: clickedNode.clickedY\n            }}>\n              <NodeControls\n                doubleSpend={this.doubleSpend.bind(this, clickedNode)}\n                spend={this.spend.bind(this, clickedNode)}\n                hide={this.deselectNode.bind(this)}\n              />\n              </div>) : ''}\n          </div>\n          <div id='Input-container'>\n            <div id='Controls-container'>\n              <Controls\n              onPause = {this.pause.bind(this)}\n              onPauseTxs = {this.pauseTxs.bind(this)}\n              paused = {paused}\n              pausedTxs = {pausedTxs}\n              togglePopup = {this.togglePopup.bind(this)}\n              adjustSpeed = {this.adjustSpeed.bind(this, 2.0)}/>\n            </div>\n            {/*<div id='Parameters-container'>\n              <Parameters\n              setSpeed = {this.setSpeed.bind(this)}\n              setLatency = {this.setLatency.bind(this)}/>\n            </div>*/}\n          </div>\n        </div>\n        <Instructions\n        show= {this.state.showPopup}\n        handleClose={this.togglePopup.bind(this)}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Sandbox;\n","import React, { Component } from 'react';\nimport _ from 'lodash'\nimport CircularProgressbar from 'react-circular-progressbar'\nimport 'react-circular-progressbar/dist/styles.css'\n\nclass Ledger extends Component {\n  constructor(props) {\n    super(props)\n    this.invalidNonceTxs = []\n    this.pendingTxs = []\n  }\n\n  updateInvalidNonceTxs() {\n    const {invalidNonceTxs} = this\n    const {node} = this.props\n    const newTxs = []\n    const updatedInvalidNonceTxs = []\n\n    Object.keys(node.invalidNonceTxs).forEach(function(address, i) {\n      Object.keys(node.invalidNonceTxs[address]).forEach(function(nonce, i) {\n        const tx = node.invalidNonceTxs[address][nonce]\n        newTxs.push(tx.contents)\n      })\n    })\n    //add Old txs into updatedInvalidNonceTxs if it's in the array of new txs\n    for (let tx of invalidNonceTxs) {\n      const hasOldTx = newTxs.find(newTx => _.isEqual(newTx, tx))\n      if (hasOldTx) {\n        updatedInvalidNonceTxs.push(tx)\n      }\n    }\n    //add all new txs into updatedInvalidNonceTxs\n    for(let newTx of newTxs) {\n      const hasNewTx = updatedInvalidNonceTxs.find(tx => _.isEqual(newTx, tx))\n      if (!hasNewTx) {\n        updatedInvalidNonceTxs.push(newTx)\n      }\n    }\n    this.invalidNonceTxs = updatedInvalidNonceTxs\n  }\n\n  updatePendingTxs() {\n    const {node} = this.props\n    const pendingTxs = []\n    Object.keys(node.pendingTxs).forEach((timeout, i) => {\n      for (let tx of node.pendingTxs[timeout]) {\n        pendingTxs.push({...tx, timeout: timeout})\n      }\n    })\n    this.pendingTxs = pendingTxs\n  }\n\n  clicked(showState, node) {\n    showState(node)\n  }\n\n  render() {\n    const {node, icons, showState} = this.props\n    this.updateInvalidNonceTxs()\n    this.updatePendingTxs()\n    const pendingTxData = this.pendingTxs.map(function(tx, i) {\n      const percentage = Math.floor(100*(node.network.time - tx.contents.timestamp)/(tx.timeout-tx.contents.timestamp))\n      console.log('percentage:', percentage, 'color: #', tx.sigs[0].slice(2,8))\n      return (\n        <tr key={i}>\n          <td>{tx.contents.from.substring(0,5)}</td>\n          <td>{tx.contents.to.substring(0,5)}</td>\n          <td>{tx.contents.amount}</td>\n          <td>\n          <div style={{ width: '50px' }}>\n            <CircularProgressbar\n              percentage={percentage}\n              strokeWidth={50}\n              key = {tx.sigs[0]}\n              textForPercentage={null}\n              styles={{\n                path: {\n                  strokeLinecap: 'butt',\n                  stroke: '#' + tx.sigs[0].slice(2,8)\n                },\n                text: { fill: '#000' },\n              }}\n            />\n            </div>\n          </td>\n        </tr>\n      )\n    })\n    const pendingTxTable =\n    <div style = {this.pendingTxs.length ? {} : {display: 'none'}}>\n      <p>Pending Transactions</p>\n      <table>\n        <tbody>\n          <tr>\n            <th>From</th>\n            <th>To</th>\n            <th>Amount</th>\n            <th>Timeout</th>\n          </tr>\n          { pendingTxData }\n       </tbody>\n      </table>\n    </div>\n\n    const nonceData = this.invalidNonceTxs.map(function(tx, i) {\n      return (\n        <tr key={i}>\n          <td>{tx.from.substring(0,5)}</td>\n          <td>{tx.to.substring(0,5)}</td>\n          <td>{tx.amount}</td>\n          <td>{tx.nonce}</td>\n        </tr>\n      )\n    })\n    const nonceTable =\n      <div style = {this.invalidNonceTxs.length ? {} : {display: 'none'}}>\n        <p>Invalid Nonce Transactions</p>\n        <table>\n          <tbody>\n            <tr>\n              <th>From</th>\n              <th>To</th>\n              <th>Amount</th>\n              <th>Nonce</th>\n            </tr>\n            { nonceData }\n         </tbody>\n        </table>\n      </div>\n\n    const data = Object.keys(node.state).map(function(nodeId, i) {\n      return (\n        <tr key={i}>\n          <td>{nodeId.substring(0,5)}</td>\n          <td>{node.state[nodeId].balance}</td>\n          <td>{node.state[nodeId].nonce}</td>\n        </tr>\n      )\n    })\n\n    const backgroundColor = Number.parseInt(node.color.slice(1), 16)\n\n    const r = (backgroundColor >> 16) & 0xff\n    const g = (backgroundColor >> 8) & 0xff\n    const b = backgroundColor & 0xff\n\n    const brightness = (r * 0.299 + g * 0.587 + b * 0.114)/255\n\n    let textColor = \"white\"\n    if (brightness > 0.5) {\n      textColor = \"black\"\n    }\n\n    return (\n        <div className=\"Ledger\" id={\"ledger-\" + node.pid} style={{ backgroundColor: node.color, color: textColor }}>\n          <img alt=\"Gerbil\" src={icons[node.pid]} width=\"30\" />\n          <span className=\"ledger-title\">\n            {' ' + node.pid.substring(0,5)}\n          </span>\n          <button className=\"LedgerMinimizeButton\" onClick={(e) => this.clicked(showState, node)}>\n            <div className=\"LedgerMinimizeButtonIcon\" style={{ backgroundColor: textColor }}></div>\n          </button>\n          <table>\n           <tbody>\n            <tr>\n              <th>Address</th>\n              <th>Balance</th>\n              <th>Nonce</th>\n              <th>            </th>\n            </tr>\n            { data }\n           </tbody>\n          </table>\n          {pendingTxTable}\n          {nonceTable}\n        </div>\n    );\n  }\n}\n\nexport default Ledger;\n","import React from 'react';\nimport Ledger from './Ledger.jsx'\n\nconst Ledgers = ({nodes, icons, showState}) => {\n  return (\n    <div id=\"Ledgers\">\n      {Object.keys(nodes).map((pid, index) =>\n        <Ledger\n          key={pid}\n          node={nodes[pid]}\n          icons={icons}\n          showState={showState}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default Ledgers;\n","import React from 'react';\nimport { Modal, Button, Popover, OverlayTrigger } from 'react-bootstrap';\nimport YouTube from 'react-youtube';\n\nconst Instructions = ({show, handleClose}) => {\n  const colorPopover = (\n    <Popover id=\"modal-popover\" title=\"\">\n      For the technical people: We took the first 6 hexadecimal characters of the Keccak-256 hash of the state and turned it into a hex color!\n    </Popover>\n  );\n\n  const spendPopover = (\n    <Popover id=\"modal-popover\" title=\"Spend\">\n      Clicking \"Spend\" will make the selected node generate and propagate a transaction sending $10 to a random node.\n    </Popover>\n  );\n\n  const doubleSpendPopover = (\n    <Popover id=\"modal-popover\" title=\"Double Spend\">\n      Clicking \"Double Spend\" will make the selected node generate and selectively propagate two transactions each sending $10 to a different peer.\n      <br></br>\n     {/* Transaction 1 sending $10 to Peer 1 will be broadcasted directly to Peer 1, and Transaction 2 sending $10 to Peer 2 will be broadcasted directly to Peer 2.*/}\n    </Popover>\n  );\n\n  const transactionsPopover = (\n    <Popover id=\"modal-popover\" title=\"Resume Transactions\">\n      Switching on \"Resume Transactions\" will make all nodes randomly generate and send transactions.\n      <br></br>\n    </Popover>\n  );\n\n  const opts = {\n    height: '300',\n    width: '550',\n    playerVars: { // https://developers.google.com/youtube/player_parameters\n      autoplay: 0\n    }\n  };\n\n  return (\n    <Modal show={show} onHide={handleClose}>\n     <Modal.Header closeButton>\n       <Modal.Title>Instructions</Modal.Title>\n     </Modal.Header>\n     <Modal.Body>\n       <h4>What is this?</h4>\n       <p>\n        This is an interactive network simulation designed as a part of Chapter 2 of {' '}\n           <a href=\"https://cryptoeconomics.study/\">Cryptoeconomics.study</a>. To best understand the double spend problem, here is Ethereum Researcher Karl Floersch's explanation in section 2.2 of the course:\n           <YouTube\n             videoId=\"k6JVGR7Jx0A\"\n             opts={opts}\n           />\n       </p>\n       <h4>How do you send a transaction?</h4>\n       <p>\n        Click on a node to either {' '}\n          <OverlayTrigger overlay={spendPopover}>\n            <a href=\"\">Spend</a>\n          </OverlayTrigger>\n        {' '} or {' '}\n          <OverlayTrigger overlay={doubleSpendPopover}>\n            <a href=\"\">Double Spend</a>\n          </OverlayTrigger>\n        {' '}. You can also toggle the {' '}\n          <OverlayTrigger overlay={transactionsPopover}>\n            <a href=\"\">Resume Transactions</a>\n          </OverlayTrigger>\n          {' '}switch.\n       </p>\n       <h4>Why is my network graph so small?</h4>\n       <p>\n        To increase the size of the network graph, hover over it and scroll upwards. You can also reposition the graph by dragging it around.\n       </p>\n\n       <h4>What do the colors mean?</h4>\n       <p>\n        The color of each node {' '}\n            <OverlayTrigger overlay={colorPopover}>\n              <a href = \"\">represents</a>\n            </OverlayTrigger>{' '} the state of that node's ledger.\n       </p>\n     </Modal.Body>\n     <Modal.Footer>\n       <Button onClick={handleClose}>Close</Button>\n     </Modal.Footer>\n   </Modal>\n  );\n}\n\nexport default Instructions;\n","import React, { Component } from 'react';\nimport * as d3 from 'd3';\n\nvar width = 960;\nvar height = 700;\n//Make responsive\nvar force = d3.forceSimulation()\n        .force(\"charge\", d3.forceManyBody().strength(-10000))\n        .force(\"center\", d3.forceCenter(width / 2, height / 2));\n\nvar zoom = d3.zoom();\n\n// *****************************************************\n// ** d3 functions to manipulate attributes\n// *****************************************************\n\n// **** Node Functions  ****\n\nvar enterNode = (selection) => {\n  selection.classed('node', true)\n    .append('circle')\n    .attr(\"r\", d=>{\n      if (d.constructor.name === 'Spender') return 20\n      else return 20\n\n    })\n  selection.append(\"svg:image\")\n    .attr(\"xlink:href\", d => d.gerbil)\n    .attr(\"x\", d => -12.5)\n    .attr(\"y\", d => -12.5)\n    .attr(\"height\", 25)\n    .attr(\"width\", 25)\n};\n\nvar updateNode = (selection) => {\n  selection.attr(\"transform\", (d) => \"translate(\" + d.x + \",\" + d.y + \")\")\n    .attr('fill', (d) => {\n      // return d3.color(d.color)\n      //   .brighter(0.5)\n      return d.color\n    })\n    .attr('stroke', (d) => d.color)\n    .attr('stroke-width', (d) => 5)\n};\n\n// **** Link Functions  ****\n\nvar enterLink = (selection) => {\n  selection.classed('link', true)\n    .attr(\"stroke-width\", 2)\n    .attr(\"stroke\", 'grey')\n};\n\nvar updateLink = (selection) => {\n  selection.attr(\"x1\", (d) => d.source.x)\n    .attr(\"y1\", (d) => d.source.y)\n    .attr(\"x2\", (d) => d.target.x)\n    .attr(\"y2\", (d) => d.target.y);\n};\n\n// **** Message Functions  ****\nvar enterMessage = (selection) => {\n  selection.classed('message', true)\n    .attr(\"r\", 6)\n    .attr(\"fill\", d => '#' + d.message.sigs[0].slice(2,8))\n    .attr(\"fill-opacity\", 0.5)\n    .attr('stroke-width', (d) => 3)\n    .attr('stroke', (d) => '#' + d.message.sigs[0].slice(2,8))\n    .attr(\"cx\", d=> getNodeById(d.sender).x)\n    .attr(\"cy\", d=> getNodeById(d.sender).y)\n}\n\nvar getNodeById = (id) => {\n  return force.nodes().find(\n    (node) => node.pid === id\n  )\n}\n\nconst getMsgPos = (msg, coord) => {\n  const distance = msg.time - msg.sentTime\n  const length = msg.recvTime - msg.sentTime\n  const progress = distance/length\n  const recCoord = getNodeById(msg.recipient)[coord]\n  const sentCoord = getNodeById(msg.sender)[coord]\n  return progress * (recCoord - sentCoord) + sentCoord\n}\n\nvar updateMessage = (selection) => {\n  selection\n  .transition()\n  .duration(500)\n  .ease(d3.easeLinear)\n  .attr(\"cx\", d => getMsgPos(d,'x'))\n  .attr(\"cy\", d => getMsgPos(d, 'y'))\n}\n\n// **** Graph Functions  ****\n\nvar updateGraph = (selection) => {\n  selection.selectAll('.node')\n    .call(updateNode);\n  selection.selectAll('.link')\n    .call(updateLink)\n  // selection.selectAll('.message')\n  //   .call(updateMessage)\n};\n\nvar zoomed = (selection, width, height) => {\n  // Need to get the geometry right here\n  selection.attr('transform',\n            'translate(' + (width/2 - 900) + ', ' + (height/2 - 400) + ')scale(' + 1.5 + ')');\n  console.log(\"Zoomed\", width, height)\n};\n\nvar resize = (selection) => {\n  console.log(\"Resized\")\n  width = window.innerWidth;\n  height = window.innerHeight;\n  zoomed(selection, width, height)\n};\n\n// *****************************************************\n// ** Graph component\n// *****************************************************\n\nclass Graph extends Component {\n    componentDidMount() {\n      this.d3Graph = d3.select(this.viz);\n      force.on('tick', () => {\n        // after force calculation starts, call updateGraph\n        // which uses d3 to manipulate the attributes,\n        // and React doesn't have to go through lifecycle on each tick\n        this.d3Graph.call(updateGraph);\n      });\n\n      this.d3Graph.call(resize);\n      d3.select(window).on(\"resize\", () => {\n        this.d3Graph.call(resize);\n      });\n    }\n\n    shouldComponentUpdate(nextProps) {\n      const {onClick} = this.props\n      this.d3Graph = d3.select(this.viz);\n      const d3Nodes = this.d3Graph.selectAll('.node')\n        .data(nextProps.nodes, (node) => node.pid);\n      d3Nodes.enter().append('g').call(enterNode)\n      .on('click', function(d){\n        onClick(d, d3.event.pageX, d3.event.pageY)\n      })\n      d3Nodes.exit().remove();\n      d3Nodes.call(updateNode);\n\n      const d3Links = this.d3Graph.selectAll('.link')\n        .data(nextProps.links)\n\n      d3Links.enter().insert('line', '.node').call(enterLink);\n      d3Links.exit().remove();\n      d3Links.call(updateLink);\n      const d3Messages = this.d3Graph.selectAll('.message')\n        .data(nextProps.messages, message => {\n          return message.message.sigs[0] + ':' +\n          message.recipient + ':' +\n          message.sender\n        });\n      const msgEnter = d3Messages.enter().insert('circle', '.node').call(enterMessage);\n      d3Messages.exit().remove()\n      d3Messages.merge(msgEnter).call(updateMessage);\n\n      // we should actually clone the nodes and links\n      // since we're not supposed to directly mutate\n      // props passed in from parent, and d3's force function\n      // mutates the nodes and links array directly\n      // we're bypassing that here for sake of brevity in example\n      force.nodes(nextProps.nodes)\n        .force(\"link\", d3.forceLink(nextProps.links)\n          .id(d => d.pid)\n          .distance(d=>50)\n          .strength(.3)\n        );\n      return false;\n    }\n\n    render() {\n      return (\n        <svg width={width} height={height}>\n          <g ref={el => this.viz = el} />\n        </svg>\n      );\n    }\n}\n\nexport default Graph;\n","import React, { Component } from 'react';\nimport {nodes, network} from '../../c2_NetworkDoubleSpends/Latency_Based_Consensus/createFTNetSim'\nimport Controls from '../Controls.js'\nimport Ledgers from './Ledgers.jsx'\nimport Instructions from './Instructions.jsx'\nimport Tray from '../Tray.jsx'\nimport Graph from './Graph.js'\nimport NodeControls from '../NodeControls.js'\nimport * as d3 from 'd3'\n\n// import Parameters from './Parameters.js'\nimport clone  from 'clone';\n\nconst ICONS = [\n  'https://i.imgur.com/Wi9yFXw.png',\n  'https://i.imgur.com/U5Y99Rm.png',\n  'https://i.imgur.com/NPH4rqg.png',\n  'https://i.imgur.com/MptO0GC.png',\n  'https://i.imgur.com/yHwPVBF.png',\n  'https://i.imgur.com/yvv1MMb.png',\n  'https://i.imgur.com/I4Dlkik.png',\n  'https://i.imgur.com/jNB8LS6.png'\n]\n\nconst TICK_LENGTH = 500 //ms\n\n// graph payload (with minimalist structure)\nconst data = {\n  nodes: [],\n  links: []\n}\n\nlet iconMap = {}\nfor (let i = 0; i < nodes.length; i++) {\n  nodes[i].gerbil = ICONS[i]\n  iconMap[nodes[i].pid] = ICONS[i]\n}\nfor (const node of nodes) {\n  // connect them\n  for (const peer of network.peers[node.pid]) {\n    data.links.push({\n      source: node.pid,\n      target: peer.pid\n    })\n  }\n}\n\nclass Sandbox extends Component {\n  constructor() {\n    super()\n    this.state = {\n      // clickedNode: null,\n      selectedNodes:{},\n      history: [],\n      paused: false,\n      pausedTxs: true,\n      speed: 1,\n      showPopup: false //for DEV3\n    }\n  }\n\n  componentDidMount() {\n    for (let node of nodes) {\n      this.showState(node)\n    }\n    this.timer = d3.interval(this.tick.bind(this), TICK_LENGTH/this.state.speed);\n  }\n\n  setMessageQueue(currNetwork){\n    let oldQ = currNetwork.messageQueue\n    const messages = []\n    Object.keys(oldQ).forEach(function(key,index) {\n      for (let message of oldQ[key]) {\n        const newMsg = {...message, time: currNetwork.time}\n        newMsg.recipient = newMsg.recipient.pid\n        messages.push(newMsg)\n      }\n    });\n    return messages\n  }\n\n  tick() {\n    network.tick()\n    const history = this.state.history\n    history.push(clone(network)) // push a deep clone of the network object\n    const messages = this.setMessageQueue(network)\n    this.setState({history: history, messages: messages})\n  }\n\n  // getTick(time) {\n  //   const {history, selectedNodes, clickedNode} = this.state\n  //   if(time > history.length) {\n  //     throw new Error('You skipped a time step!')\n  //   } else if (time === history.length ) {\n  //     this.tick()\n  //   }\n  //   let messages = this.setMessageQueue(history[time])\n  //   this.setState({messages: messages, time: time})\n  // }\n\n  // getNode (nodeId, time) {\n  //   const currNetwork = this.state.history[time]\n  //   if (currNetwork) {\n  //     return currNetwork.agents.find((node) => {\n  //       return node.pid === nodeId;\n  //     });\n  //   }\n  // }\n\n  getCurrNode(nodeId) {\n    if (network) {\n      return network.agents.find((node) => node.pid === nodeId);\n    }\n  }\n\n  onClickNode (node, x, y) {\n    const {clickedNode} = this.state\n\n    if (clickedNode && node.pid === clickedNode.pid) {\n      this.setState({clickedNode: null})\n    } else {\n      this.setState({clickedNode: {...node, clickedX: x, clickedY: y}})\n    }\n  };\n\n  pause(){\n    const {paused, speed} = this.state\n    if (paused) {\n      this.timer = d3.interval(this.tick.bind(this), TICK_LENGTH/this.state.speed);\n    } else {\n      this.timer.stop()\n    }\n    this.setState({ paused: !paused })\n\n    //this.state.speed = 1    //(reset FF/Rewind)\n  }\n  pauseTxs(){\n    this.setState({ pausedTxs: !this.state.pausedTxs })\n    for(let node of nodes) {\n      node.pausedSpending = !node.pausedSpending\n    }\n  }\n\n  rewind(){\n    let speed = this.state.speed\n    if(speed*1.5 > 10){\n      return\n    }\n    this.setState({speed : speed *= 1.5})\n    console.log('rewind', speed)\n  }\n\n  fastforward(){\n    let speed = this.state.speed\n    if(speed/1.5 < .005){\n      return\n    }\n    this.setState({speed : speed /= 1.5})\n    console.log('fastforward', speed)\n  }\n\n  stepbackward(){\n    console.log('stepbackward')\n    const {time} = this.state\n    if(time < 1){\n      return\n    }\n    this.setState({paused:true})\n    this.graph.step(time - 1)\n    this.getTick(time - 1)\n    this.graph.animate()\n    //this.graph.setState({messages: this.setMessageQueue(this.history[time])})\n  }\n\n  stepforward(){\n    console.log('stepforward')\n    const {time} = this.state\n    this.setState({paused:true})\n    this.graph.step(time + 1)\n    this.getTick(time + 1)\n    this.graph.animate()\n  }\n\n  doubleSpend(evilNode){\n    evilNode = this.getCurrNode(evilNode.pid)\n    const drEvil = evilNode.pid\n    const victims = [network.peers[drEvil][0], network.peers[drEvil][1]]\n    const spends = [evilNode.generateTx(victims[0].wallet.address, 10), evilNode.generateTx(victims[1].wallet.address, 10)]\n    spends[0].isDoubleSpend = true\n    spends[1].isDoubleSpend = true\n    network.broadcastTo(drEvil, victims[0], spends[0])\n    network.broadcastTo(drEvil, victims[1], spends[1])\n\n    console.log('Double spender:', drEvil, 'victims:', victims, 'spends:', spends)\n  }\n\n  spend(currNode){\n    const node = this.getCurrNode(currNode.pid)\n    // initiate random spend\n    node.sendTx(node.getRandomReceiver(), 10)\n  }\n\n  showState(node){\n    // create popup with state\n    const {selectedNodes} = this.state\n    if (selectedNodes[node.pid]) {\n      delete selectedNodes[node.pid]\n    } else {\n      selectedNodes[node.pid] = node\n    }\n    this.setState({selectedNodes: selectedNodes})\n  }\n\n  togglePopup() {\n    this.setState({\n      showPopup: !this.state.showPopup\n    });\n  }\n\n  deselectNode(){\n    this.setState({clickedNode: null})\n  }\n\n  reset(){\n    console.log('reset')\n    this.getTick(0)\n  }\n  setSpeed(value){\n    let speed = value/1000.0\n    this.setState({speed : speed})\n    console.log('speeedooo', speed)\n\n  }\n  setLatency(event){\n    let raw = event.target.value\n    let scaled = Math.min(Math.max(parseInt(raw), 1), 10)\n    console.log('latency', raw, scaled)\n\n  }\n  setPacketLoss(event){\n    let raw = event.target.value\n    let scaled = Math.min(Math.max(parseInt(raw), 1), 20)\n    console.log('packetloss', raw, scaled)\n\n  }\n  render() {\n    const {clickedNode, selectedNodes, messages, time, paused, pausedTxs, speed} = this.state\n    return (\n      <div id='App-container'>\n        <div id = 'Network-container'>\n          <div id = 'Graph-container'>\n            <Tray\n              nodes={nodes}\n              selectedNodes={selectedNodes}\n              showState = {this.showState.bind(this)}\n              icons = {iconMap}\n            />\n            <Ledgers\n              nodes={selectedNodes}\n              showState = {this.showState.bind(this)}\n              icons = {iconMap}\n            />\n            <Graph\n              nodes={nodes}\n              links={data.links}\n              messages = {messages || []}\n              onClick = {this.onClickNode.bind(this)}\n           />\n           {clickedNode ? (\n            <div style= {{\n              position:'absolute',\n              left: clickedNode.clickedX - 400,\n              top: clickedNode.clickedY\n            }}>\n              <NodeControls\n                doubleSpend={this.doubleSpend.bind(this, clickedNode)}\n                spend={this.spend.bind(this, clickedNode)}\n                hide={this.deselectNode.bind(this)}\n              />\n              </div>) : ''}\n          </div>\n          <div id='Input-container'>\n            <div id='Controls-container'>\n              <Controls\n              onPause = {this.pause.bind(this)}\n              onPauseTxs = {this.pauseTxs.bind(this)}\n              paused = {paused}\n              pausedTxs = {pausedTxs}\n              togglePopup = {this.togglePopup.bind(this)}\n              stepbackward = {this.stepbackward.bind(this)}\n              stepforward = {this.stepforward.bind(this)}\n              rewind = {this.rewind.bind(this)}\n              fastforward = {this.fastforward.bind(this)}\n              reset = {this.reset.bind(this)}/>\n            </div>\n            {/*<div id='Parameters-container'>\n              <Parameters\n              setSpeed = {this.setSpeed.bind(this)}\n              setLatency = {this.setLatency.bind(this)}/>\n            </div>*/}\n          </div>\n        </div>\n        <Instructions\n        show= {this.state.showPopup}\n        handleClose={this.togglePopup.bind(this)}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Sandbox;\n","import React from 'react';\nimport '../styles/App.css';\nimport Home from './Home';\nimport NaiveSandbox from './Sandbox.js';\nimport LatencySandbox from './latency-based-consensus/Sandbox.js';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <NaiveSandbox/>\n{/*      <Router>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/naive-consensus\" component={NaiveSandbox} />\n          <Route path=\"/latency-based-consensus\" component={LatencySandbox} />\n        </Switch>\n      </Router>*/}\n    </div>\n  )\n}\n\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './components/App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nregisterServiceWorker();\n","var EthCrypto = require('eth-crypto')\nvar {Node, getTxHash} = require('../nodeAgent')\n\n// Spender is a Node that sends a random transaction at every tick()\nclass FaultTolerant extends Node {\n  constructor (wallet, genesis, network, delta) {\n    super(wallet, genesis, network)\n    this.delta = delta\n    this.pendingTxs = {}\n    this.seen = []\n    this.nonce = 0\n  }\n\n  timeout(timestamp, numObservers) {\n    return timestamp + numObservers * this.delta\n  }\n  addressesFromSigs(tx) {\n      let addressSet = new Set()\n      for (let i = 0; i < tx.sigs.length; i++) {\n        const sig = tx.sigs[i]\n        const slicedTx = {\n          contents: tx.contents,\n          sigs: tx.sigs.slice(0,i)\n        }\n        const messageHash = getTxHash(slicedTx)\n        const address = EthCrypto.recover(sig, messageHash)\n        if(i===0 && address !== tx.contents.from) throw new Error('Invalid first signature!')\n        addressSet.add(address)\n      }\n      return addressSet\n  }\n\n  onReceive (tx) {\n    if (this.seen.includes(tx.contents)) return\n    const sigs = this.addressesFromSigs(tx)\n    //TODO catch error if first signee is not tx sender\n    if(this.network.time >= this.timeout(tx.contents.timestamp, sigs.size)) return\n    this.addToPending(tx)\n    //add signature\n    tx.sigs.push(EthCrypto.sign(this.wallet.privateKey, getTxHash(tx)))\n    this.network.broadcast(this.pid, tx)\n  }\n  addToPending(tx) {\n    //seen tx\n    this.seen.push(tx.contents)\n    //TODO Check that each signee is actually a peer in the network\n      //-possible attack: byzantine node signs a message 100 times with random Private Key\n    const finalTimeout = this.timeout(tx.contents.timestamp, this.network.agents.length)\n    if (!this.pendingTxs[finalTimeout]) this.pendingTxs[finalTimeout] = []\n    //add to pending ( we'll apply this transaction once we hit finalTimeout)\n    this.pendingTxs[finalTimeout].push(tx)\n    //Choice rule: if have two transactions with same sender, nonce, and timestamp apply the one with lower sig first\n    this.pendingTxs[finalTimeout].sort((a, b)=>{\n      return a.sigs[0] - b.sigs[0]\n    })\n  }\n  sendTx(to, amount) {\n    const tx = this.generateTx(to, amount)\n    this.nonce++\n    this.addToPending(tx)\n    this.network.broadcast(this.pid, tx)\n  }\n\n  tick () {\n    const {time} = this.network\n    const toApply = this.pendingTxs[time]\n    if(!toApply) return\n    for (let tx of toApply) {\n      this.applyTransaction(tx)\n    }\n    delete this.pendingTxs[time]\n  }\n\n  generateTx (to, amount) {\n    const unsignedTx = {\n      type: 'send',\n      amount: amount,\n      from: this.wallet.address,\n      to: to,\n      nonce: this.nonce,\n      timestamp: this.network.time\n    }\n    const tx = {\n      contents: unsignedTx,\n      sigs: []\n    }\n    tx.sigs.push(EthCrypto.sign(this.wallet.privateKey, getTxHash(tx)))\n    return tx\n  }\n\n  applyTransaction (tx) {\n    console.log('~~~~~~~~~APPLY TRANSACTION~~~~~~~~~~', tx)\n    // If we don't have a record for this address, create one\n    if (!(tx.contents.to in this.state)) {\n      this.state[tx.contents.to] = {\n        balance: 0,\n        nonce: 0\n      }\n    }\n    // Check that the nonce is correct for replay protection\n    if (tx.contents.nonce > this.state[tx.contents.from].nonce) {\n        if (!(tx.contents.from in this.invalidNonceTxs)) {\n            this.invalidNonceTxs[tx.contents.from] = {}\n        }\n        this.invalidNonceTxs[tx.contents.from][tx.contents.nonce] = tx\n        return\n    } else if (tx.contents.nonce < this.state[tx.contents.from].nonce) {\n        console.log('passed nonce tx rejected')\n        return\n    }\n    //Apply send to balances\n    if (tx.contents.type === 'send') { // Send coins\n      if (this.state[tx.contents.from].balance - tx.contents.amount < 0) {\n        throw new Error('Not enough money!')\n      }\n      this.state[tx.contents.from].balance -= tx.contents.amount\n      this.state[tx.contents.to].balance += tx.contents.amount\n    } else {\n      throw new Error('Invalid transaction type!')\n    }\n    this.state[tx.contents.from].nonce += 1\n    this.setColor()\n  }\n}\n\nmodule.exports = FaultTolerant\n"],"sourceRoot":""}